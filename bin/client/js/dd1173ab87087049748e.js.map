{"version":3,"file":"js/dd1173ab87087049748e.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/mixin-cache-as-bitmap/lib/mixin-cache-as-bitmap.es.js","webpack:///../../node_modules/@pixi/mixin-get-child-by-name/lib/mixin-get-child-by-name.es.js","webpack:///../../node_modules/@pixi/mixin-get-global-position/lib/mixin-get-global-position.es.js"],"sourcesContent":["/*!\n * @pixi/mixin-cache-as-bitmap - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture, BaseTexture, Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\n\nvar _tempMatrix = new Matrix();\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nvar CacheData = /** @class */ (function () {\n    function CacheData() {\n        this.textureCacheId = null;\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n    return CacheData;\n}());\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get: function () {\n            return this._cacheAsBitmap;\n        },\n        set: function (value) {\n            if (this._cacheAsBitmap === value) {\n                return;\n            }\n            this._cacheAsBitmap = value;\n            var data;\n            if (value) {\n                if (!this._cacheData) {\n                    this._cacheData = new CacheData();\n                }\n                data = this._cacheData;\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n                data.originalDestroy = this.destroy;\n                data.originalContainsPoint = this.containsPoint;\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else {\n                data = this._cacheData;\n                if (data.sprite) {\n                    this._destroyCachedDisplayObject();\n                }\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n                this.destroy = data.originalDestroy;\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n        return;\n    }\n    this._initCachedDisplayObject(renderer);\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n    if (this._cacheData && this._cacheData.sprite) {\n        return;\n    }\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    var cacheAlpha = this.alpha;\n    this.alpha = 1;\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    var bounds = this.getLocalBounds(null, true).clone();\n    // add some padding!\n    if (this.filters) {\n        var padding = this.filters[0].padding;\n        bounds.pad(padding);\n    }\n    bounds.ceil(settings.RESOLUTION);\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    var cachedRenderTexture = renderer.renderTexture.current;\n    var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    var cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    var cachedProjectionTransform = renderer.projection.transform;\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n    // this renderTexture will be used to store the cached DisplayObject\n    var renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n    var textureCacheId = \"cacheAsBitmap_\" + uid();\n    this._cacheData.textureCacheId = textureCacheId;\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n    // need to set //\n    var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n    renderer.render(this, renderTexture, true, m, false);\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n    // renderer.filterManager.filterStack = stack;\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n    this._mask = null;\n    this.filterArea = null;\n    // create our cached sprite\n    var cachedSprite = new Sprite(renderTexture);\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n    this._cacheData.sprite = cachedSprite;\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent) {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else {\n        this.updateTransform();\n    }\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n        return;\n    }\n    this._initCachedDisplayObjectCanvas(renderer);\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderCanvas(renderer);\n};\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n    if (this._cacheData && this._cacheData.sprite) {\n        return;\n    }\n    // get bounds actually transforms the object for us already!\n    var bounds = this.getLocalBounds(null, true);\n    var cacheAlpha = this.alpha;\n    this.alpha = 1;\n    var cachedRenderTarget = renderer.context;\n    var cachedProjectionTransform = renderer._projTransform;\n    bounds.ceil(settings.RESOLUTION);\n    var renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n    var textureCacheId = \"cacheAsBitmap_\" + uid();\n    this._cacheData.textureCacheId = textureCacheId;\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n    // need to set //\n    var m = _tempMatrix;\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n    renderer.render(this, renderTexture, true, m, false);\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    renderer._projTransform = cachedProjectionTransform;\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n    this._mask = null;\n    this.filterArea = null;\n    // create our cached sprite\n    var cachedSprite = new Sprite(renderTexture);\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n    this._cacheData.sprite = cachedSprite;\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent) {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else {\n        this.updateTransform();\n    }\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite._calculateBounds();\n    this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n    this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n\nexport { CacheData };\n//# sourceMappingURL=mixin-cache-as-bitmap.es.js.map\n","/*!\n * @pixi/mixin-get-child-by-name - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/mixin-get-child-by-name is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { DisplayObject, Container } from '@pixi/display';\n\n/**\n * The instance name of the object.\n *\n * @memberof PIXI.DisplayObject#\n * @member {string} name\n */\nDisplayObject.prototype.name = null;\n/**\n * Returns the display object in the container.\n *\n * Recursive searches are done in a preorder traversal.\n *\n * @method getChildByName\n * @memberof PIXI.Container#\n * @param {string} name - Instance name.\n * @param {boolean}[deep=false] - Whether to search recursively\n * @return {PIXI.DisplayObject} The child with the specified name.\n */\nContainer.prototype.getChildByName = function getChildByName(name, deep) {\n    for (var i = 0, j = this.children.length; i < j; i++) {\n        if (this.children[i].name === name) {\n            return this.children[i];\n        }\n    }\n    if (deep) {\n        for (var i = 0, j = this.children.length; i < j; i++) {\n            var child = this.children[i];\n            if (!child.getChildByName) {\n                continue;\n            }\n            var target = this.children[i].getChildByName(name, true);\n            if (target) {\n                return target;\n            }\n        }\n    }\n    return null;\n};\n//# sourceMappingURL=mixin-get-child-by-name.es.js.map\n","/*!\n * @pixi/mixin-get-global-position - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/mixin-get-global-position is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { DisplayObject } from '@pixi/display';\nimport { Point } from '@pixi/math';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n *\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost.\n * @return {PIXI.Point} The updated point.\n */\nDisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point, skipUpdate) {\n    if (point === void 0) { point = new Point(); }\n    if (skipUpdate === void 0) { skipUpdate = false; }\n    if (this.parent) {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n    return point;\n};\n//# sourceMappingURL=mixin-get-global-position.es.js.map\n"],"names":["_tempMatrix","CacheData","this","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","defineProperties","cacheAsBitmap","get","_cacheAsBitmap","set","value","data","_cacheData","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","padding","pad","ceil","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedDestinationFrame","destinationFrame","cachedProjectionTransform","projection","width","height","uid","baseTexture","m","localTransform","copyTo","invert","translate","x","y","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","clear","_calculateBounds","updateID","_boundsID","_texture","options","name","deep","i","j","children","length","getChildByName","target","point","skipUpdate","toGlobal","position"],"sourceRoot":""}