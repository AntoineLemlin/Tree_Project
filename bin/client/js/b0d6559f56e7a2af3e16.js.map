{"version":3,"file":"js/b0d6559f56e7a2af3e16.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/filter-alpha/lib/filter-alpha.es.js","webpack:///../../node_modules/@pixi/filter-displacement/lib/filter-displacement.es.js"],"sourcesContent":["/*!\n * @pixi/filter-alpha - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/filter-alpha is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { defaultVertex, Filter } from '@pixi/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\\n}\\n\";\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar AlphaFilter = /** @class */ (function (_super) {\n    __extends(AlphaFilter, _super);\n    /**\n     * @param {number} [alpha=1] - Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    function AlphaFilter(alpha) {\n        if (alpha === void 0) { alpha = 1.0; }\n        var _this = _super.call(this, defaultVertex, fragment, { uAlpha: 1 }) || this;\n        _this.alpha = alpha;\n        return _this;\n    }\n    Object.defineProperty(AlphaFilter.prototype, \"alpha\", {\n        /**\n         * Coefficient for alpha multiplication\n         *\n         * @member {number}\n         * @default 1\n         */\n        get: function () {\n            return this.uniforms.uAlpha;\n        },\n        set: function (value) {\n            this.uniforms.uAlpha = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return AlphaFilter;\n}(Filter));\n\nexport { AlphaFilter };\n//# sourceMappingURL=filter-alpha.es.js.map\n","/*!\n * @pixi/filter-displacement - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/filter-displacement is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { Matrix, Point } from '@pixi/math';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar fragment = \"varying vec2 vFilterCoord;\\nvarying vec2 vTextureCoord;\\n\\nuniform vec2 scale;\\nuniform mat2 rotation;\\nuniform sampler2D uSampler;\\nuniform sampler2D mapSampler;\\n\\nuniform highp vec4 inputSize;\\nuniform vec4 inputClamp;\\n\\nvoid main(void)\\n{\\n  vec4 map =  texture2D(mapSampler, vFilterCoord);\\n\\n  map -= 0.5;\\n  map.xy = scale * inputSize.zw * (rotation * map.xy);\\n\\n  gl_FragColor = texture2D(uSampler, clamp(vec2(vTextureCoord.x + map.x, vTextureCoord.y + map.y), inputClamp.xy, inputClamp.zw));\\n}\\n\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 filterMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec2 vFilterCoord;\\n\\nuniform vec4 inputSize;\\nuniform vec4 outputFrame;\\n\\nvec4 filterVertexPosition( void )\\n{\\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\\n\\nvec2 filterTextureCoord( void )\\n{\\n    return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n}\\n\\nvoid main(void)\\n{\\n\\tgl_Position = filterVertexPosition();\\n\\tvTextureCoord = filterTextureCoord();\\n\\tvFilterCoord = ( filterMatrix * vec3( vTextureCoord, 1.0)  ).xy;\\n}\\n\";\n\n/**\n * The DisplacementFilter class uses the pixel values from the specified texture\n * (called the displacement map) to perform a displacement of an object.\n *\n * You can use this filter to apply all manor of crazy warping effects.\n * Currently the `r` property of the texture is used to offset the `x`\n * and the `g` property of the texture is used to offset the `y`.\n *\n * The way it works is it uses the values of the displacement map to look up the\n * correct pixels to output. This means it's not technically moving the original.\n * Instead, it's starting at the output and asking \"which pixel from the original goes here\".\n * For example, if a displacement map pixel has `red = 1` and the filter scale is `20`,\n * this filter will output the pixel approximately 20 pixels to the right of the original.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar DisplacementFilter = /** @class */ (function (_super) {\n    __extends(DisplacementFilter, _super);\n    /**\n     * @param {PIXI.Sprite} sprite - The sprite used for the displacement map. (make sure its added to the scene!)\n     * @param {number} [scale] - The scale of the displacement\n     */\n    function DisplacementFilter(sprite, scale) {\n        var _this = this;\n        var maskMatrix = new Matrix();\n        sprite.renderable = false;\n        _this = _super.call(this, vertex, fragment, {\n            mapSampler: sprite._texture,\n            filterMatrix: maskMatrix,\n            scale: { x: 1, y: 1 },\n            rotation: new Float32Array([1, 0, 0, 1]),\n        }) || this;\n        _this.maskSprite = sprite;\n        _this.maskMatrix = maskMatrix;\n        if (scale === null || scale === undefined) {\n            scale = 20;\n        }\n        /**\n         * scaleX, scaleY for displacements\n         * @member {PIXI.Point}\n         */\n        _this.scale = new Point(scale, scale);\n        return _this;\n    }\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     * @param {PIXI.CLEAR_MODES} clearMode - clearMode.\n     */\n    DisplacementFilter.prototype.apply = function (filterManager, input, output, clearMode) {\n        // fill maskMatrix with _normalized sprite texture coords_\n        this.uniforms.filterMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, this.maskSprite);\n        this.uniforms.scale.x = this.scale.x;\n        this.uniforms.scale.y = this.scale.y;\n        // Extract rotation from world transform\n        var wt = this.maskSprite.worldTransform;\n        var lenX = Math.sqrt((wt.a * wt.a) + (wt.b * wt.b));\n        var lenY = Math.sqrt((wt.c * wt.c) + (wt.d * wt.d));\n        if (lenX !== 0 && lenY !== 0) {\n            this.uniforms.rotation[0] = wt.a / lenX;\n            this.uniforms.rotation[1] = wt.b / lenX;\n            this.uniforms.rotation[2] = wt.c / lenY;\n            this.uniforms.rotation[3] = wt.d / lenY;\n        }\n        // draw the filter...\n        filterManager.applyFilter(this, input, output, clearMode);\n    };\n    Object.defineProperty(DisplacementFilter.prototype, \"map\", {\n        /**\n         * The texture used for the displacement map. Must be power of 2 sized texture.\n         *\n         * @member {PIXI.Texture}\n         */\n        get: function () {\n            return this.uniforms.mapSampler;\n        },\n        set: function (value) {\n            this.uniforms.mapSampler = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DisplacementFilter;\n}(Filter));\n\nexport { DisplacementFilter };\n//# sourceMappingURL=filter-displacement.es.js.map\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","AlphaFilter","_super","alpha","_this","call","this","uAlpha","__","constructor","prototype","create","__extends","defineProperty","get","uniforms","set","value","enumerable","configurable","DisplacementFilter","sprite","scale","maskMatrix","renderable","mapSampler","_texture","filterMatrix","x","y","rotation","Float32Array","maskSprite","apply","filterManager","input","output","clearMode","calculateSpriteMatrix","wt","worldTransform","lenX","Math","sqrt","a","lenY","c","applyFilter"],"sourceRoot":""}