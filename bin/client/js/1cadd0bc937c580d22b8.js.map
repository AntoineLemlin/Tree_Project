{"version":3,"file":"js/1cadd0bc937c580d22b8.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/display/lib/display.es.js"],"sourcesContent":["/*!\n * @pixi/display - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/display is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\nimport { Rectangle, Transform, RAD_TO_DEG, DEG_TO_RAD } from '@pixi/math';\nimport { EventEmitter, removeItems } from '@pixi/utils';\n\n/**\n * Sets the default value for the container property 'sortableChildren'.\n * If set to true, the container will sort its children by zIndex value\n * when updateTransform() is called, or manually if sortChildren() is called.\n *\n * This actually changes the order of elements in the array, so should be treated\n * as a basic solution that is not performant compared to other solutions,\n * such as @link https://github.com/pixijs/pixi-display\n *\n * Also be aware of that this may not work nicely with the addChildAt() function,\n * as the zIndex sorting may cause the child to automatically sorted to another position.\n *\n * @static\n * @constant\n * @name SORTABLE_CHILDREN\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.SORTABLE_CHILDREN = false;\n\n/**\n * 'Builder' pattern for bounds rectangles.\n *\n * This could be called an Axis-Aligned Bounding Box.\n * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n *\n * @class\n * @memberof PIXI\n */\nvar Bounds = /** @class */ (function () {\n    function Bounds() {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minX = Infinity;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.minY = Infinity;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxX = -Infinity;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.maxY = -Infinity;\n        this.rect = null;\n        /**\n         * It is updated to _boundsID of corresponding object to keep bounds in sync with content.\n         * Updated from outside, thus public modifier.\n         *\n         * @member {number}\n         * @public\n         */\n        this.updateID = -1;\n    }\n    /**\n     * Checks if bounds are empty.\n     *\n     * @return {boolean} True if empty.\n     */\n    Bounds.prototype.isEmpty = function () {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    };\n    /**\n     * Clears the bounds and resets.\n     *\n     */\n    Bounds.prototype.clear = function () {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    };\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     *\n     * @param {PIXI.Rectangle} rect - temporary object will be used if AABB is not empty\n     * @returns {PIXI.Rectangle} A rectangle of the bounds\n     */\n    Bounds.prototype.getRectangle = function (rect) {\n        if (this.minX > this.maxX || this.minY > this.maxY) {\n            return Rectangle.EMPTY;\n        }\n        rect = rect || new Rectangle(0, 0, 1, 1);\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n        return rect;\n    };\n    /**\n     * This function should be inlined when its possible.\n     *\n     * @param {PIXI.IPointData} point - The point to add.\n     */\n    Bounds.prototype.addPoint = function (point) {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    };\n    /**\n     * Adds a quad, not transformed\n     *\n     * @param {Float32Array} vertices - The verts to add.\n     */\n    Bounds.prototype.addQuad = function (vertices) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        var x = vertices[0];\n        var y = vertices[1];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Adds sprite frame, transformed.\n     *\n     * @param {PIXI.Transform} transform - transform to apply\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     */\n    Bounds.prototype.addFrame = function (transform, x0, y0, x1, y1) {\n        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    };\n    /**\n     * Adds sprite frame, multiplied by matrix\n     *\n     * @param {PIXI.Matrix} matrix - matrix to apply\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     */\n    Bounds.prototype.addFrameMatrix = function (matrix, x0, y0, x1, y1) {\n        var a = matrix.a;\n        var b = matrix.b;\n        var c = matrix.c;\n        var d = matrix.d;\n        var tx = matrix.tx;\n        var ty = matrix.ty;\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        var x = (a * x0) + (c * y0) + tx;\n        var y = (b * x0) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Adds screen vertices from array\n     *\n     * @param {Float32Array} vertexData - calculated vertices\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     */\n    Bounds.prototype.addVertexData = function (vertexData, beginOffset, endOffset) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        for (var i = beginOffset; i < endOffset; i += 2) {\n            var x = vertexData[i];\n            var y = vertexData[i + 1];\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Add an array of mesh vertices\n     *\n     * @param {PIXI.Transform} transform - mesh transform\n     * @param {Float32Array} vertices - mesh coordinates in array\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     */\n    Bounds.prototype.addVertices = function (transform, vertices, beginOffset, endOffset) {\n        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    };\n    /**\n     * Add an array of mesh vertices.\n     *\n     * @param {PIXI.Matrix} matrix - mesh matrix\n     * @param {Float32Array} vertices - mesh coordinates in array\n     * @param {number} beginOffset - begin offset\n     * @param {number} endOffset - end offset, excluded\n     * @param {number} [padX=0] - x padding\n     * @param {number} [padY=0] - y padding\n     */\n    Bounds.prototype.addVerticesMatrix = function (matrix, vertices, beginOffset, endOffset, padX, padY) {\n        if (padX === void 0) { padX = 0; }\n        if (padY === void 0) { padY = padX; }\n        var a = matrix.a;\n        var b = matrix.b;\n        var c = matrix.c;\n        var d = matrix.d;\n        var tx = matrix.tx;\n        var ty = matrix.ty;\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        for (var i = beginOffset; i < endOffset; i += 2) {\n            var rawX = vertices[i];\n            var rawY = vertices[i + 1];\n            var x = (a * rawX) + (c * rawY) + tx;\n            var y = (d * rawY) + (b * rawX) + ty;\n            minX = Math.min(minX, x - padX);\n            maxX = Math.max(maxX, x + padX);\n            minY = Math.min(minY, y - padY);\n            maxY = Math.max(maxY, y + padY);\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    };\n    /**\n     * Adds other Bounds.\n     *\n     * @param {PIXI.Bounds} bounds - The Bounds to be added\n     */\n    Bounds.prototype.addBounds = function (bounds) {\n        var minX = this.minX;\n        var minY = this.minY;\n        var maxX = this.maxX;\n        var maxY = this.maxY;\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    };\n    /**\n     * Adds other Bounds, masked with Bounds.\n     *\n     * @param {PIXI.Bounds} bounds - The Bounds to be added.\n     * @param {PIXI.Bounds} mask - TODO\n     */\n    Bounds.prototype.addBoundsMask = function (bounds, mask) {\n        var _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        var _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        var _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        var _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n        if (_minX <= _maxX && _minY <= _maxY) {\n            var minX = this.minX;\n            var minY = this.minY;\n            var maxX = this.maxX;\n            var maxY = this.maxY;\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    };\n    /**\n     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n     *\n     * @param {PIXI.Bounds} bounds - other bounds\n     * @param {PIXI.Matrix} matrix - multiplicator\n     */\n    Bounds.prototype.addBoundsMatrix = function (bounds, matrix) {\n        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    };\n    /**\n     * Adds other Bounds, masked with Rectangle.\n     *\n     * @param {PIXI.Bounds} bounds - TODO\n     * @param {PIXI.Rectangle} area - TODO\n     */\n    Bounds.prototype.addBoundsArea = function (bounds, area) {\n        var _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        var _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        var _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        var _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n        if (_minX <= _maxX && _minY <= _maxY) {\n            var minX = this.minX;\n            var minY = this.minY;\n            var maxX = this.maxX;\n            var maxY = this.maxY;\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    };\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param {number} [paddingX=0] - The horizontal padding amount.\n     * @param {number} [paddingY=0] - The vertical padding amount.\n     */\n    Bounds.prototype.pad = function (paddingX, paddingY) {\n        if (paddingX === void 0) { paddingX = 0; }\n        if (paddingY === void 0) { paddingY = paddingX; }\n        if (!this.isEmpty()) {\n            this.minX -= paddingX;\n            this.maxX += paddingX;\n            this.minY -= paddingY;\n            this.maxY += paddingY;\n        }\n    };\n    /**\n     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n     *\n     * @param {number} x0 - left X of frame\n     * @param {number} y0 - top Y of frame\n     * @param {number} x1 - right X of frame\n     * @param {number} y1 - bottom Y of frame\n     * @param {number} padX - padding X\n     * @param {number} padY - padding Y\n     */\n    Bounds.prototype.addFramePad = function (x0, y0, x1, y1, padX, padY) {\n        x0 -= padX;\n        y0 -= padY;\n        x1 += padX;\n        y1 += padY;\n        this.minX = this.minX < x0 ? this.minX : x0;\n        this.maxX = this.maxX > x1 ? this.maxX : x1;\n        this.minY = this.minY < y0 ? this.minY : y0;\n        this.maxY = this.maxY > y1 ? this.maxY : y1;\n    };\n    return Bounds;\n}());\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * The base class for all objects that are rendered on the screen.\n *\n * This is an abstract class and should not be used on its own; rather it should b e extended.\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nvar DisplayObject = /** @class */ (function (_super) {\n    __extends(DisplayObject, _super);\n    function DisplayObject() {\n        var _this = _super.call(this) || this;\n        _this.tempDisplayObjectParent = null;\n        // TODO: need to create Transform from factory\n        /**\n         * World transform and local transform of this object.\n         * This will become read-only later, please do not assign anything there unless you know what are you doing.\n         *\n         * @member {PIXI.Transform}\n         */\n        _this.transform = new Transform();\n        /**\n         * The opacity of the object.\n         *\n         * @member {number}\n         */\n        _this.alpha = 1;\n        /**\n         * The visibility of the object. If false the object will not be drawn, and\n         * the updateTransform function will not be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n         *\n         * @member {boolean}\n         */\n        _this.visible = true;\n        /**\n         * Can this object be rendered, if false the object will not be drawn but the updateTransform\n         * methods will still be called.\n         *\n         * Only affects recursive calls from parent. You can ask for bounds manually.\n         *\n         * @member {boolean}\n         */\n        _this.renderable = true;\n        /**\n         * The display object container that contains this display object.\n         *\n         * @member {PIXI.Container}\n         */\n        _this.parent = null;\n        /**\n         * The multiplied alpha of the displayObject.\n         *\n         * @member {number}\n         * @readonly\n         */\n        _this.worldAlpha = 1;\n        /**\n         * Which index in the children array the display component was before the previous zIndex sort.\n         * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n         *\n         * @member {number}\n         * @protected\n         */\n        _this._lastSortedIndex = 0;\n        /**\n         * The zIndex of the displayObject.\n         * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         * @protected\n         */\n        _this._zIndex = 0;\n        /**\n         * The area the filter is applied to. This is used as more of an optimization\n         * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n         *\n         * Also works as an interaction mask.\n         *\n         * @member {?PIXI.Rectangle}\n         */\n        _this.filterArea = null;\n        /**\n         * Sets the filters for the displayObject.\n         * * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * To remove filters simply set this property to `'null'`.\n         *\n         * @member {?PIXI.Filter[]}\n         */\n        _this.filters = null;\n        /**\n         * Currently enabled filters\n         * @member {PIXI.Filter[]}\n         * @protected\n         */\n        _this._enabledFilters = null;\n        /**\n         * The bounds object, this is used to calculate and store the bounds of the displayObject.\n         *\n         * @member {PIXI.Bounds}\n         */\n        _this._bounds = new Bounds();\n        /**\n         * Local bounds object, swapped with `_bounds` when using `getLocalBounds()`.\n         *\n         * @member {PIXI.Bounds}\n         */\n        _this._localBounds = null;\n        /**\n         * Flags the cached bounds as dirty.\n         *\n         * @member {number}\n         * @protected\n         */\n        _this._boundsID = 0;\n        /**\n         * Cache of this display-object's bounds-rectangle.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        _this._boundsRect = null;\n        /**\n         * Cache of this display-object's local-bounds rectangle.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        _this._localBoundsRect = null;\n        /**\n         * The original, cached mask of the object.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         * @protected\n         */\n        _this._mask = null;\n        /**\n         * Fired when this DisplayObject is added to a Container.\n         *\n         * @event PIXI.DisplayObject#added\n         * @param {PIXI.Container} container - The container added to.\n         */\n        /**\n         * Fired when this DisplayObject is removed from a Container.\n         *\n         * @event PIXI.DisplayObject#removed\n         * @param {PIXI.Container} container - The container removed from.\n         */\n        /**\n         * If the object has been destroyed via destroy(). If true, it should not be used.\n         *\n         * @member {boolean}\n         * @protected\n         */\n        _this._destroyed = false;\n        /**\n         * used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        _this.isSprite = false;\n        /**\n         * Does any other displayObject use this object as a mask?\n         * @member {boolean}\n         */\n        _this.isMask = false;\n        return _this;\n    }\n    /**\n     * Mixes all enumerable properties and methods from a source object to DisplayObject.\n     *\n     * @param {object} source - The source of properties and methods to mix in.\n     */\n    DisplayObject.mixin = function (source) {\n        // in ES8/ES2017, this would be really easy:\n        // Object.defineProperties(DisplayObject.prototype, Object.getOwnPropertyDescriptors(source));\n        // get all the enumerable property keys\n        var keys = Object.keys(source);\n        // loop through properties\n        for (var i = 0; i < keys.length; ++i) {\n            var propertyName = keys[i];\n            // Set the property using the property descriptor - this works for accessors and normal value properties\n            Object.defineProperty(DisplayObject.prototype, propertyName, Object.getOwnPropertyDescriptor(source, propertyName));\n        }\n    };\n    /**\n     * Recursively updates transform of all objects from the root to this one\n     * internal function for toLocal()\n     */\n    DisplayObject.prototype._recursivePostUpdateTransform = function () {\n        if (this.parent) {\n            this.parent._recursivePostUpdateTransform();\n            this.transform.updateTransform(this.parent.transform);\n        }\n        else {\n            this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n        }\n    };\n    /**\n     * Updates the object transform for rendering.\n     *\n     * TODO - Optimization pass!\n     */\n    DisplayObject.prototype.updateTransform = function () {\n        this._boundsID++;\n        this.transform.updateTransform(this.parent.transform);\n        // multiply the alphas..\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    };\n    /**\n     * Retrieves the bounds of the displayObject as a rectangle object.\n     *\n     * @param {boolean} [skipUpdate] - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    DisplayObject.prototype.getBounds = function (skipUpdate, rect) {\n        if (!skipUpdate) {\n            if (!this.parent) {\n                this.parent = this._tempDisplayObjectParent;\n                this.updateTransform();\n                this.parent = null;\n            }\n            else {\n                this._recursivePostUpdateTransform();\n                this.updateTransform();\n            }\n        }\n        if (this._bounds.updateID !== this._boundsID) {\n            this.calculateBounds();\n            this._bounds.updateID = this._boundsID;\n        }\n        if (!rect) {\n            if (!this._boundsRect) {\n                this._boundsRect = new Rectangle();\n            }\n            rect = this._boundsRect;\n        }\n        return this._bounds.getRectangle(rect);\n    };\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    DisplayObject.prototype.getLocalBounds = function (rect) {\n        if (!rect) {\n            if (!this._localBoundsRect) {\n                this._localBoundsRect = new Rectangle();\n            }\n            rect = this._localBoundsRect;\n        }\n        if (!this._localBounds) {\n            this._localBounds = new Bounds();\n        }\n        var transformRef = this.transform;\n        var parentRef = this.parent;\n        this.parent = null;\n        this.transform = this._tempDisplayObjectParent.transform;\n        var worldBounds = this._bounds;\n        var worldBoundsID = this._boundsID;\n        this._bounds = this._localBounds;\n        var bounds = this.getBounds(false, rect);\n        this.parent = parentRef;\n        this.transform = transformRef;\n        this._bounds = worldBounds;\n        this._bounds.updateID += this._boundsID - worldBoundsID; // reflect side-effects\n        return bounds;\n    };\n    /**\n     * Calculates the global position of the display object.\n     *\n     * @param {PIXI.IPointData} position - The world origin to calculate from.\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform.\n     * @return {PIXI.Point} A point object representing the position of this object.\n     */\n    DisplayObject.prototype.toGlobal = function (position, point, skipUpdate) {\n        if (skipUpdate === void 0) { skipUpdate = false; }\n        if (!skipUpdate) {\n            this._recursivePostUpdateTransform();\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent) {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else {\n                this.displayObjectUpdateTransform();\n            }\n        }\n        // don't need to update the lot\n        return this.worldTransform.apply(position, point);\n    };\n    /**\n     * Calculates the local position of the display object relative to another point.\n     *\n     * @param {PIXI.IPointData} position - The world origin to calculate from.\n     * @param {PIXI.DisplayObject} [from] - The DisplayObject to calculate the global position from.\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param {boolean} [skipUpdate=false] - Should we skip the update transform\n     * @return {PIXI.Point} A point object representing the position of this object\n     */\n    DisplayObject.prototype.toLocal = function (position, from, point, skipUpdate) {\n        if (from) {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n        if (!skipUpdate) {\n            this._recursivePostUpdateTransform();\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent) {\n                this.parent = this._tempDisplayObjectParent;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else {\n                this.displayObjectUpdateTransform();\n            }\n        }\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse(position, point);\n    };\n    /**\n     * Set the parent Container of this DisplayObject.\n     *\n     * @param {PIXI.Container} container - The Container to add this DisplayObject to.\n     * @return {PIXI.Container} The Container that this DisplayObject was added to.\n     */\n    DisplayObject.prototype.setParent = function (container) {\n        if (!container || !container.addChild) {\n            throw new Error('setParent: Argument must be a Container');\n        }\n        container.addChild(this);\n        return container;\n    };\n    /**\n     * Convenience function to set the position, scale, skew and pivot at once.\n     *\n     * @param {number} [x=0] - The X position\n     * @param {number} [y=0] - The Y position\n     * @param {number} [scaleX=1] - The X scale value\n     * @param {number} [scaleY=1] - The Y scale value\n     * @param {number} [rotation=0] - The rotation\n     * @param {number} [skewX=0] - The X skew value\n     * @param {number} [skewY=0] - The Y skew value\n     * @param {number} [pivotX=0] - The X pivot value\n     * @param {number} [pivotY=0] - The Y pivot value\n     * @return {PIXI.DisplayObject} The DisplayObject instance\n     */\n    DisplayObject.prototype.setTransform = function (x, y, scaleX, scaleY, rotation, skewX, skewY, pivotX, pivotY) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (scaleX === void 0) { scaleX = 1; }\n        if (scaleY === void 0) { scaleY = 1; }\n        if (rotation === void 0) { rotation = 0; }\n        if (skewX === void 0) { skewX = 0; }\n        if (skewY === void 0) { skewY = 0; }\n        if (pivotX === void 0) { pivotX = 0; }\n        if (pivotY === void 0) { pivotY = 0; }\n        this.position.x = x;\n        this.position.y = y;\n        this.scale.x = !scaleX ? 1 : scaleX;\n        this.scale.y = !scaleY ? 1 : scaleY;\n        this.rotation = rotation;\n        this.skew.x = skewX;\n        this.skew.y = skewY;\n        this.pivot.x = pivotX;\n        this.pivot.y = pivotY;\n        return this;\n    };\n    /**\n     * Base destroy method for generic display objects. This will automatically\n     * remove the display object from its parent Container as well as remove\n     * all current event listeners and internal references. Do not use a DisplayObject\n     * after calling `destroy()`.\n     *\n     */\n    DisplayObject.prototype.destroy = function (_options) {\n        if (this.parent) {\n            this.parent.removeChild(this);\n        }\n        this.removeAllListeners();\n        this.transform = null;\n        this.parent = null;\n        this._bounds = null;\n        this._mask = null;\n        this.filters = null;\n        this.filterArea = null;\n        this.hitArea = null;\n        this.interactive = false;\n        this.interactiveChildren = false;\n        this._destroyed = true;\n    };\n    Object.defineProperty(DisplayObject.prototype, \"_tempDisplayObjectParent\", {\n        /**\n         * @protected\n         * @member {PIXI.Container}\n         */\n        get: function () {\n            if (this.tempDisplayObjectParent === null) {\n                // eslint-disable-next-line no-use-before-define\n                this.tempDisplayObjectParent = new TemporaryDisplayObject();\n            }\n            return this.tempDisplayObjectParent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n     *\n     * ```\n     * const cacheParent = elem.enableTempParent();\n     * elem.updateTransform();\n     * elem.disableTempParent(cacheParent);\n     * ```\n     *\n     * @returns {PIXI.DisplayObject} current parent\n     */\n    DisplayObject.prototype.enableTempParent = function () {\n        var myParent = this.parent;\n        this.parent = this._tempDisplayObjectParent;\n        return myParent;\n    };\n    /**\n     * Pair method for `enableTempParent`\n     * @param {PIXI.DisplayObject} cacheParent actual parent of element\n     */\n    DisplayObject.prototype.disableTempParent = function (cacheParent) {\n        this.parent = cacheParent;\n    };\n    Object.defineProperty(DisplayObject.prototype, \"x\", {\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         * An alias to position.x\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.position.x;\n        },\n        set: function (value) {\n            this.transform.position.x = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"y\", {\n        /**\n         * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n         * An alias to position.y\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.position.y;\n        },\n        set: function (value) {\n            this.transform.position.y = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"worldTransform\", {\n        /**\n         * Current transform of the object based on world (parent) factors.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        get: function () {\n            return this.transform.worldTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"localTransform\", {\n        /**\n         * Current transform of the object based on local factors: position, scale, other stuff.\n         *\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        get: function () {\n            return this.transform.localTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"position\", {\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.position;\n        },\n        set: function (value) {\n            this.transform.position.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"scale\", {\n        /**\n         * The scale factor of the object.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.scale;\n        },\n        set: function (value) {\n            this.transform.scale.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"pivot\", {\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.pivot;\n        },\n        set: function (value) {\n            this.transform.pivot.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"skew\", {\n        /**\n         * The skew factor for the object in radians.\n         * Assignment by value since pixi-v4.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        get: function () {\n            return this.transform.skew;\n        },\n        set: function (value) {\n            this.transform.skew.copyFrom(value);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"rotation\", {\n        /**\n         * The rotation of the object in radians.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.transform.rotation;\n        },\n        set: function (value) {\n            this.transform.rotation = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"angle\", {\n        /**\n         * The angle of the object in degrees.\n         * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.transform.rotation * RAD_TO_DEG;\n        },\n        set: function (value) {\n            this.transform.rotation = value * DEG_TO_RAD;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"zIndex\", {\n        /**\n         * The zIndex of the displayObject.\n         * If a container has the sortableChildren property set to true, children will be automatically\n         * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n         * and thus rendered on top of other displayObjects within the same container.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._zIndex;\n        },\n        set: function (value) {\n            this._zIndex = value;\n            if (this.parent) {\n                this.parent.sortDirty = true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"worldVisible\", {\n        /**\n         * Indicates if the object is globally visible.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        get: function () {\n            var item = this;\n            do {\n                if (!item.visible) {\n                    return false;\n                }\n                item = item.parent;\n            } while (item);\n            return true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(DisplayObject.prototype, \"mask\", {\n        /**\n         * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n         * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n         * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n         * utilities shape clipping. To remove a mask, set this property to `null`.\n         *\n         * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n         * @example\n         * const graphics = new PIXI.Graphics();\n         * graphics.beginFill(0xFF3300);\n         * graphics.drawRect(50, 250, 100, 100);\n         * graphics.endFill();\n         *\n         * const sprite = new PIXI.Sprite(texture);\n         * sprite.mask = graphics;\n         * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n         *\n         * @member {PIXI.Container|PIXI.MaskData|null}\n         */\n        get: function () {\n            return this._mask;\n        },\n        set: function (value) {\n            if (this._mask) {\n                var maskObject = (this._mask.maskObject || this._mask);\n                maskObject.renderable = true;\n                maskObject.isMask = false;\n            }\n            this._mask = value;\n            if (this._mask) {\n                var maskObject = (this._mask.maskObject || this._mask);\n                maskObject.renderable = false;\n                maskObject.isMask = true;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DisplayObject;\n}(EventEmitter));\nvar TemporaryDisplayObject = /** @class */ (function (_super) {\n    __extends(TemporaryDisplayObject, _super);\n    function TemporaryDisplayObject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.sortDirty = null;\n        return _this;\n    }\n    return TemporaryDisplayObject;\n}(DisplayObject));\n/**\n * DisplayObject default updateTransform, does not update children of container.\n * Will crash if there's no parent element.\n *\n * @memberof PIXI.DisplayObject#\n * @function displayObjectUpdateTransform\n */\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\n\nfunction sortChildren(a, b) {\n    if (a.zIndex === b.zIndex) {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n    return a.zIndex - b.zIndex;\n}\n/**\n * A Container represents a collection of display objects.\n *\n * It is the base class of all display objects that act as a container for other objects (like Sprites).\n *\n *```js\n * let container = new PIXI.Container();\n * container.addChild(sprite);\n * ```\n *\n * @class\n * @extends PIXI.DisplayObject\n * @memberof PIXI\n */\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        var _this = _super.call(this) || this;\n        /**\n         * The array of children of this container.\n         *\n         * @member {PIXI.DisplayObject[]}\n         * @readonly\n         */\n        _this.children = [];\n        /**\n         * If set to true, the container will sort its children by zIndex value\n         * when updateTransform() is called, or manually if sortChildren() is called.\n         *\n         * This actually changes the order of elements in the array, so should be treated\n         * as a basic solution that is not performant compared to other solutions,\n         * such as @link https://github.com/pixijs/pixi-display\n         *\n         * Also be aware of that this may not work nicely with the addChildAt() function,\n         * as the zIndex sorting may cause the child to automatically sorted to another position.\n         *\n         * @see PIXI.settings.SORTABLE_CHILDREN\n         *\n         * @member {boolean}\n         */\n        _this.sortableChildren = settings.SORTABLE_CHILDREN;\n        /**\n         * Should children be sorted by zIndex at the next updateTransform call.\n         * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n         *\n         * @member {boolean}\n         */\n        _this.sortDirty = false;\n        return _this;\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         *\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         *\n         * @event PIXI.DisplayObject#removedFrom\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed removed the child.\n         * @param {number} index - The former children's index of the removed child\n         */\n    }\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified\n     *\n     * @protected\n     */\n    Container.prototype.onChildrenChange = function (_length) {\n        /* empty */\n    };\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     *\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @return {PIXI.DisplayObject} The first child that was added.\n     */\n    Container.prototype.addChild = function () {\n        var arguments$1 = arguments;\n\n        var children = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            children[_i] = arguments$1[_i];\n        }\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1) {\n            // loop through the array and add all children\n            for (var i = 0; i < children.length; i++) {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else {\n            var child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n            if (child.parent) {\n                child.parent.removeChild(child);\n            }\n            child.parent = this;\n            this.sortDirty = true;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            this.children.push(child);\n            // ensure bounds will be recalculated\n            this._boundsID++;\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n        return children[0];\n    };\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     *\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @return {PIXI.DisplayObject} The child that was added.\n     */\n    Container.prototype.addChildAt = function (child, index) {\n        if (index < 0 || index > this.children.length) {\n            throw new Error(child + \"addChildAt: The index \" + index + \" supplied is out of bounds \" + this.children.length);\n        }\n        if (child.parent) {\n            child.parent.removeChild(child);\n        }\n        child.parent = this;\n        this.sortDirty = true;\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n        this.children.splice(index, 0, child);\n        // ensure bounds will be recalculated\n        this._boundsID++;\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n        return child;\n    };\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     *\n     * @param {PIXI.DisplayObject} child - First display object to swap\n     * @param {PIXI.DisplayObject} child2 - Second display object to swap\n     */\n    Container.prototype.swapChildren = function (child, child2) {\n        if (child === child2) {\n            return;\n        }\n        var index1 = this.getChildIndex(child);\n        var index2 = this.getChildIndex(child2);\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    };\n    /**\n     * Returns the index position of a child DisplayObject instance\n     *\n     * @param {PIXI.DisplayObject} child - The DisplayObject instance to identify\n     * @return {number} The index position of the child display object to identify\n     */\n    Container.prototype.getChildIndex = function (child) {\n        var index = this.children.indexOf(child);\n        if (index === -1) {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n        return index;\n    };\n    /**\n     * Changes the position of an existing child in the display object container\n     *\n     * @param {PIXI.DisplayObject} child - The child DisplayObject instance for which you want to change the index number\n     * @param {number} index - The resulting index number for the child display object\n     */\n    Container.prototype.setChildIndex = function (child, index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error(\"The index \" + index + \" supplied is out of bounds \" + this.children.length);\n        }\n        var currentIndex = this.getChildIndex(child);\n        removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n        this.onChildrenChange(index);\n    };\n    /**\n     * Returns the child at the specified index\n     *\n     * @param {number} index - The index to get the child at\n     * @return {PIXI.DisplayObject} The child at the given index, if any.\n     */\n    Container.prototype.getChildAt = function (index) {\n        if (index < 0 || index >= this.children.length) {\n            throw new Error(\"getChildAt: Index (\" + index + \") does not exist.\");\n        }\n        return this.children[index];\n    };\n    /**\n     * Removes one or more children from the container.\n     *\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @return {PIXI.DisplayObject} The first child that was removed.\n     */\n    Container.prototype.removeChild = function () {\n        var arguments$1 = arguments;\n\n        var children = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            children[_i] = arguments$1[_i];\n        }\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1) {\n            // loop through the arguments property and remove all children\n            for (var i = 0; i < children.length; i++) {\n                this.removeChild(children[i]);\n            }\n        }\n        else {\n            var child = children[0];\n            var index = this.children.indexOf(child);\n            if (index === -1)\n                { return null; }\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            removeItems(this.children, index, 1);\n            // ensure bounds will be recalculated\n            this._boundsID++;\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n        return children[0];\n    };\n    /**\n     * Removes a child from the specified index position.\n     *\n     * @param {number} index - The index to get the child from\n     * @return {PIXI.DisplayObject} The child that was removed.\n     */\n    Container.prototype.removeChildAt = function (index) {\n        var child = this.getChildAt(index);\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        removeItems(this.children, index, 1);\n        // ensure bounds will be recalculated\n        this._boundsID++;\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n        return child;\n    };\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     *\n     * @param {number} [beginIndex=0] - The beginning position.\n     * @param {number} [endIndex=this.children.length] - The ending position. Default value is size of the container.\n     * @returns {PIXI.DisplayObject[]} List of removed children\n     */\n    Container.prototype.removeChildren = function (beginIndex, endIndex) {\n        if (beginIndex === void 0) { beginIndex = 0; }\n        if (endIndex === void 0) { endIndex = this.children.length; }\n        var begin = beginIndex;\n        var end = endIndex;\n        var range = end - begin;\n        var removed;\n        if (range > 0 && range <= end) {\n            removed = this.children.splice(begin, range);\n            for (var i = 0; i < removed.length; ++i) {\n                removed[i].parent = null;\n                if (removed[i].transform) {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n            this._boundsID++;\n            this.onChildrenChange(beginIndex);\n            for (var i = 0; i < removed.length; ++i) {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0) {\n            return [];\n        }\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    };\n    /**\n     * Sorts children by zIndex. Previous order is mantained for 2 children with the same zIndex.\n     */\n    Container.prototype.sortChildren = function () {\n        var sortRequired = false;\n        for (var i = 0, j = this.children.length; i < j; ++i) {\n            var child = this.children[i];\n            child._lastSortedIndex = i;\n            if (!sortRequired && child.zIndex !== 0) {\n                sortRequired = true;\n            }\n        }\n        if (sortRequired && this.children.length > 1) {\n            this.children.sort(sortChildren);\n        }\n        this.sortDirty = false;\n    };\n    /**\n     * Updates the transform on all children of this container for rendering\n     */\n    Container.prototype.updateTransform = function () {\n        if (this.sortableChildren && this.sortDirty) {\n            this.sortChildren();\n        }\n        this._boundsID++;\n        this.transform.updateTransform(this.parent.transform);\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n        for (var i = 0, j = this.children.length; i < j; ++i) {\n            var child = this.children[i];\n            if (child.visible) {\n                child.updateTransform();\n            }\n        }\n    };\n    /**\n     * Recalculates the bounds of the container.\n     *\n     */\n    Container.prototype.calculateBounds = function () {\n        this._bounds.clear();\n        this._calculateBounds();\n        for (var i = 0; i < this.children.length; i++) {\n            var child = this.children[i];\n            if (!child.visible || !child.renderable) {\n                continue;\n            }\n            child.calculateBounds();\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask) {\n                var maskObject = (child._mask.maskObject || child._mask);\n                maskObject.calculateBounds();\n                this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n            }\n            else if (child.filterArea) {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n        this._bounds.updateID = this._boundsID;\n    };\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * @param {PIXI.Rectangle} [rect] - Optional rectangle to store the result of the bounds calculation.\n     * @param {boolean} [skipChildrenUpdate=false] - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @return {PIXI.Rectangle} The rectangular bounding area.\n     */\n    Container.prototype.getLocalBounds = function (rect, skipChildrenUpdate) {\n        if (skipChildrenUpdate === void 0) { skipChildrenUpdate = false; }\n        var result = _super.prototype.getLocalBounds.call(this, rect);\n        if (!skipChildrenUpdate) {\n            for (var i = 0, j = this.children.length; i < j; ++i) {\n                var child = this.children[i];\n                if (child.visible) {\n                    child.updateTransform();\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * Recalculates the bounds of the object. Override this to\n     * calculate the bounds of the specific object (not including children).\n     *\n     * @protected\n     */\n    Container.prototype._calculateBounds = function () {\n        // FILL IN//\n    };\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Container.prototype.render = function (renderer) {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n            return;\n        }\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || (this.filters && this.filters.length)) {\n            this.renderAdvanced(renderer);\n        }\n        else {\n            this._render(renderer);\n            // simple render children!\n            for (var i = 0, j = this.children.length; i < j; ++i) {\n                this.children[i].render(renderer);\n            }\n        }\n    };\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Container.prototype.renderAdvanced = function (renderer) {\n        renderer.batch.flush();\n        var filters = this.filters;\n        var mask = this._mask;\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters) {\n            if (!this._enabledFilters) {\n                this._enabledFilters = [];\n            }\n            this._enabledFilters.length = 0;\n            for (var i = 0; i < filters.length; i++) {\n                if (filters[i].enabled) {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n            if (this._enabledFilters.length) {\n                renderer.filter.push(this, this._enabledFilters);\n            }\n        }\n        if (mask) {\n            renderer.mask.push(this, this._mask);\n        }\n        // add this object to the batch, only rendered if it has a texture.\n        this._render(renderer);\n        // now loop through the children and make sure they get rendered\n        for (var i = 0, j = this.children.length; i < j; i++) {\n            this.children[i].render(renderer);\n        }\n        renderer.batch.flush();\n        if (mask) {\n            renderer.mask.pop(this);\n        }\n        if (filters && this._enabledFilters && this._enabledFilters.length) {\n            renderer.filter.pop();\n        }\n    };\n    /**\n     * To be overridden by the subclasses.\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    Container.prototype._render = function (_renderer) {\n        // this is where content itself gets rendered...\n    };\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    Container.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this);\n        this.sortDirty = false;\n        var destroyChildren = typeof options === 'boolean' ? options : options && options.children;\n        var oldChildren = this.removeChildren(0, this.children.length);\n        if (destroyChildren) {\n            for (var i = 0; i < oldChildren.length; ++i) {\n                oldChildren[i].destroy(options);\n            }\n        }\n    };\n    Object.defineProperty(Container.prototype, \"width\", {\n        /**\n         * The width of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.scale.x * this.getLocalBounds().width;\n        },\n        set: function (value) {\n            var width = this.getLocalBounds().width;\n            if (width !== 0) {\n                this.scale.x = value / width;\n            }\n            else {\n                this.scale.x = 1;\n            }\n            this._width = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Container.prototype, \"height\", {\n        /**\n         * The height of the Container, setting this will actually modify the scale to achieve the value set\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.scale.y * this.getLocalBounds().height;\n        },\n        set: function (value) {\n            var height = this.getLocalBounds().height;\n            if (height !== 0) {\n                this.scale.y = value / height;\n            }\n            else {\n                this.scale.y = 1;\n            }\n            this._height = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Container;\n}(DisplayObject));\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n *\n * @memberof PIXI.Container#\n * @function containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n\nexport { Bounds, Container, DisplayObject, TemporaryDisplayObject };\n//# sourceMappingURL=display.es.js.map\n"],"names":["Bounds","this","minX","Infinity","minY","maxX","maxY","rect","updateID","prototype","isEmpty","clear","getRectangle","x","y","width","height","addPoint","point","Math","min","max","addQuad","vertices","addFrame","transform","x0","y0","x1","y1","addFrameMatrix","worldTransform","matrix","a","b","c","d","tx","ty","addVertexData","vertexData","beginOffset","endOffset","i","addVertices","addVerticesMatrix","padX","padY","rawX","rawY","addBounds","bounds","addBoundsMask","mask","_minX","_minY","_maxX","_maxY","addBoundsMatrix","addBoundsArea","area","pad","paddingX","paddingY","addFramePad","extendStatics","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","DisplayObject","_super","_this","call","tempDisplayObjectParent","alpha","visible","renderable","parent","worldAlpha","_lastSortedIndex","_zIndex","filterArea","filters","_enabledFilters","_bounds","_localBounds","_boundsID","_boundsRect","_localBoundsRect","_mask","_destroyed","isSprite","isMask","mixin","source","keys","length","propertyName","defineProperty","getOwnPropertyDescriptor","_recursivePostUpdateTransform","updateTransform","_tempDisplayObjectParent","getBounds","skipUpdate","calculateBounds","getLocalBounds","transformRef","parentRef","worldBounds","worldBoundsID","toGlobal","position","displayObjectUpdateTransform","apply","toLocal","from","applyInverse","setParent","container","addChild","Error","setTransform","scaleX","scaleY","rotation","skewX","skewY","pivotX","pivotY","scale","skew","pivot","destroy","_options","removeChild","removeAllListeners","hitArea","interactive","interactiveChildren","get","TemporaryDisplayObject","enumerable","configurable","enableTempParent","myParent","disableTempParent","cacheParent","set","value","localTransform","copyFrom","sortDirty","item","maskObject","EventEmitter","arguments","sortChildren","zIndex","Container","children","sortableChildren","onChildrenChange","_length","arguments$1","_i","child","_parentID","push","emit","addChildAt","index","splice","swapChildren","child2","index1","getChildIndex","index2","indexOf","setChildIndex","currentIndex","removeItems","getChildAt","removeChildAt","removeChildren","beginIndex","endIndex","removed","begin","range","RangeError","sortRequired","j","sort","_calculateBounds","skipChildrenUpdate","result","render","renderer","renderAdvanced","_render","batch","flush","enabled","filter","pop","_renderer","options","destroyChildren","oldChildren","_width","_height","containerUpdateTransform"],"sourceRoot":""}