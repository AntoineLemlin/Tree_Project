{"version":3,"file":"js/6d01b8649573fb06cfb6.js","mappings":"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","sources":["webpack:///../../node_modules/@react-leaflet/core/esm/context.js","webpack:///../../node_modules/react-leaflet/esm/MapContainer.js","webpack:///../../node_modules/@react-leaflet/core/esm/pane.js","webpack:///../../node_modules/react-leaflet/esm/TileLayer.js","webpack:///../../node_modules/@react-leaflet/core/esm/generic.js","webpack:///../../node_modules/@react-leaflet/core/esm/element.js","webpack:///../../node_modules/@react-leaflet/core/esm/grid-layer.js","webpack:///../../node_modules/@react-leaflet/core/esm/component.js","webpack:///../../node_modules/@react-leaflet/core/esm/layer.js","webpack:///../../node_modules/@react-leaflet/core/esm/attribution.js","webpack:///../../node_modules/@react-leaflet/core/esm/events.js"],"sourcesContent":["import { createContext, useContext } from 'react';\nexport const CONTEXT_VERSION = 1;\nexport const LeafletContext = /*#__PURE__*/createContext(null);\nexport const LeafletProvider = LeafletContext.Provider;\nexport function useLeafletContext() {\n  const context = useContext(LeafletContext);\n\n  if (context == null) {\n    throw new Error('No context provided: useLeafletContext() can only be used in a descendant of <MapContainer>');\n  }\n\n  return context;\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { CONTEXT_VERSION, LeafletProvider } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nexport function useMapElement(mapRef, props) {\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    if (mapRef.current !== null && map === null) {\n      const instance = new LeafletMap(mapRef.current, props);\n\n      if (props.center != null && props.zoom != null) {\n        instance.setView(props.center, props.zoom);\n      } else if (props.bounds != null) {\n        instance.fitBounds(props.bounds, props.boundsOptions);\n      }\n\n      if (props.whenReady != null) {\n        instance.whenReady(props.whenReady);\n      }\n\n      setMap(instance);\n    }\n  }, [mapRef, map, props]);\n  return map;\n}\nexport function MapContainer({\n  children,\n  className,\n  id,\n  placeholder,\n  style,\n  whenCreated,\n  ...options\n}) {\n  const mapRef = useRef(null);\n  const map = useMapElement(mapRef, options);\n  const createdRef = useRef(false);\n  useEffect(() => {\n    if (map != null && createdRef.current === false && whenCreated != null) {\n      createdRef.current = true;\n      whenCreated(map);\n    }\n  }, [map, whenCreated]);\n  const [props] = useState({\n    className,\n    id,\n    style\n  });\n  const context = useMemo(() => map ? {\n    __version: CONTEXT_VERSION,\n    map\n  } : null, [map]);\n  const contents = context ? /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: context\n  }, children) : placeholder ?? null;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    ref: mapRef\n  }), contents);\n}","export function withPane(props, context) {\n  const pane = props.pane ?? context.pane;\n  return pane ? { ...props,\n    pane\n  } : props;\n}","import { createTileLayerComponent, updateGridLayer, withPane } from '@react-leaflet/core';\nimport { TileLayer as LeafletTileLayer } from 'leaflet';\nexport const TileLayer = createTileLayerComponent(function createTileLayer({\n  url,\n  ...options\n}, context) {\n  return {\n    instance: new LeafletTileLayer(url, withPane(options, context)),\n    context\n  };\n}, updateGridLayer);","import { createContainerComponent, createDivOverlayComponent, createLeafComponent } from './component';\nimport { createControlHook } from './control';\nimport { createElementHook } from './element';\nimport { createLayerHook } from './layer';\nimport { createDivOverlayHook } from './div-overlay';\nimport { createPathHook } from './path';\nexport function createControlComponent(createInstance) {\n  function createElement(props, context) {\n    return {\n      instance: createInstance(props),\n      context\n    };\n  }\n\n  const useElement = createElementHook(createElement);\n  const useControl = createControlHook(useElement);\n  return createLeafComponent(useControl);\n}\nexport function createLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createContainerComponent(useLayer);\n}\nexport function createOverlayComponent(createElement, useLifecycle) {\n  const useElement = createElementHook(createElement);\n  const useOverlay = createDivOverlayHook(useElement, useLifecycle);\n  return createDivOverlayComponent(useOverlay);\n}\nexport function createPathComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const usePath = createPathHook(useElement);\n  return createContainerComponent(usePath);\n}\nexport function createTileLayerComponent(createElement, updateElement) {\n  const useElement = createElementHook(createElement, updateElement);\n  const useLayer = createLayerHook(useElement);\n  return createLeafComponent(useLayer);\n}","import { useEffect, useRef } from 'react';\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      return useRef(createElement(props, context));\n    };\n  }\n\n  return function useMutableLeafletElement(props, context) {\n    const elementRef = useRef(createElement(props, context));\n    const propsRef = useRef(props);\n    const {\n      instance\n    } = elementRef.current;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","export function updateGridLayer(layer, props, prevProps) {\n  const {\n    opacity,\n    zIndex\n  } = props;\n\n  if (opacity != null && opacity !== prevProps.opacity) {\n    layer.setOpacity(opacity);\n  }\n\n  if (zIndex != null && zIndex !== prevProps.zIndex) {\n    layer.setZIndex(zIndex);\n  }\n}","import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { LeafletProvider } from './context';\nexport function createContainerComponent(useElement) {\n  function ContainerComponent(props, ref) {\n    const {\n      instance,\n      context\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return props.children == null ? null : /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children);\n  }\n\n  return /*#__PURE__*/forwardRef(ContainerComponent);\n}\nexport function createDivOverlayComponent(useElement) {\n  function OverlayComponent(props, ref) {\n    const [isOpen, setOpen] = useState(false);\n    const {\n      instance\n    } = useElement(props, setOpen).current;\n    useImperativeHandle(ref, () => instance);\n    useEffect(function updateOverlay() {\n      if (isOpen) {\n        instance.update();\n      }\n    }, [instance, isOpen, props.children]); // @ts-ignore _contentNode missing in type definition\n\n    const contentNode = instance._contentNode;\n    return contentNode ? /*#__PURE__*/createPortal(props.children, contentNode) : null;\n  }\n\n  return /*#__PURE__*/forwardRef(OverlayComponent);\n}\nexport function createLeafComponent(useElement) {\n  function LeafComponent(props, ref) {\n    const {\n      instance\n    } = useElement(props).current;\n    useImperativeHandle(ref, () => instance);\n    return null;\n  }\n\n  return /*#__PURE__*/forwardRef(LeafComponent);\n}","import { useEffect } from 'react';\nimport { useAttribution } from './attribution';\nimport { useLeafletContext } from './context';\nimport { useEventHandlers } from './events';\nimport { withPane } from './pane';\nexport function useLayerLifecycle(element, context) {\n  useEffect(function addLayer() {\n    const container = context.layerContainer ?? context.map;\n    container.addLayer(element.instance);\n    return function removeLayer() {\n      var _context$layerContain;\n\n      (_context$layerContain = context.layerContainer) == null ? void 0 : _context$layerContain.removeLayer(element.instance);\n      context.map.removeLayer(element.instance);\n    };\n  }, [context, element]);\n}\nexport function createLayerHook(useElement) {\n  return function useLayer(props) {\n    const context = useLeafletContext();\n    const elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLayerLifecycle(elementRef.current, context);\n    return elementRef;\n  };\n}","import { useEffect, useRef } from 'react';\nexport function useAttribution(map, attribution) {\n  const attributionRef = useRef(attribution);\n  useEffect(function updateAttribution() {\n    if (attribution !== attributionRef.current && map.attributionControl != null) {\n      if (attributionRef.current != null) {\n        map.attributionControl.removeAttribution(attributionRef.current);\n      }\n\n      if (attribution != null) {\n        map.attributionControl.addAttribution(attribution);\n      }\n    }\n\n    attributionRef.current = attribution;\n  }, [map, attribution]);\n}","import { useEffect, useRef } from 'react';\nexport function useEventHandlers(element, eventHandlers) {\n  const eventHandlersRef = useRef();\n  useEffect(function addEventHandlers() {\n    if (eventHandlers != null) {\n      element.instance.on(eventHandlers);\n    }\n\n    eventHandlersRef.current = eventHandlers;\n    return function removeEventHandlers() {\n      if (eventHandlersRef.current != null) {\n        element.instance.off(eventHandlersRef.current);\n      }\n\n      eventHandlersRef.current = null;\n    };\n  }, [element, eventHandlers]);\n}"],"names":["CONTEXT_VERSION","LeafletContext","createContext","LeafletProvider","Provider","useLeafletContext","context","useContext","Error","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","MapContainer","children","className","id","placeholder","style","whenCreated","options","mapRef","useRef","map","props","setMap","useState","useEffect","current","instance","center","zoom","setView","bounds","fitBounds","boundsOptions","whenReady","useMapElement","createdRef","useMemo","__version","contents","value","ref","withPane","pane","TileLayer","createElement","updateElement","useElement","elementRef","propsRef","url","layer","prevProps","opacity","zIndex","setOpacity","setZIndex","LeafComponent","useImperativeHandle","forwardRef","attribution","attributionRef","attributionControl","removeAttribution","addAttribution","useAttribution","element","eventHandlers","eventHandlersRef","on","off","useEventHandlers","layerContainer","addLayer","_context$layerContain","removeLayer","useLayerLifecycle","createTileLayerComponent"],"sourceRoot":""}