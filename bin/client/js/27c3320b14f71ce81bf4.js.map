{"version":3,"file":"js/27c3320b14f71ce81bf4.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/prepare/lib/prepare.es.js"],"sourcesContent":["/*!\n * @pixi/prepare - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/prepare is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { Container } from '@pixi/display';\nimport { Text, TextStyle, TextMetrics } from '@pixi/text';\n\n/**\n * Default number of uploads per frame using prepare plugin.\n *\n * @static\n * @memberof PIXI.settings\n * @name UPLOADS_PER_FRAME\n * @type {number}\n * @default 4\n */\nsettings.UPLOADS_PER_FRAME = 4;\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar CountLimiter = /** @class */ (function () {\n    /**\n     * @param {number} maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    function CountLimiter(maxItemsPerFrame) {\n        /**\n         * The maximum number of items that can be prepared each frame.\n         * @type {number}\n         * @private\n         */\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        /**\n         * The number of items that can be prepared in the current frame.\n         * @type {number}\n         * @private\n         */\n        this.itemsLeft = 0;\n    }\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    CountLimiter.prototype.beginFrame = function () {\n        this.itemsLeft = this.maxItemsPerFrame;\n    };\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    CountLimiter.prototype.allowedToUpload = function () {\n        return this.itemsLeft-- > 0;\n    };\n    return CountLimiter;\n}());\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item, queue) {\n    var result = false;\n    // Objects with multiple textures\n    if (item && item._textures && item._textures.length) {\n        for (var i = 0; i < item._textures.length; i++) {\n            if (item._textures[i] instanceof Texture) {\n                var baseTexture = item._textures[i].baseTexture;\n                if (queue.indexOf(baseTexture) === -1) {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n}\n/**\n * Built-in hook to find BaseTextures from Texture.\n *\n * @private\n * @param {PIXI.Texture} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item, queue) {\n    if (item.baseTexture instanceof BaseTexture) {\n        var texture = item.baseTexture;\n        if (queue.indexOf(texture) === -1) {\n            queue.push(texture);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to find textures from objects.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Texture object was found.\n */\nfunction findTexture(item, queue) {\n    if (item._texture && item._texture instanceof Texture) {\n        var texture = item._texture.baseTexture;\n        if (queue.indexOf(texture) === -1) {\n            queue.push(texture);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n *\n * @private\n * @param {PIXI.AbstractRenderer|PIXI.BasePrepare} helper - Not used by this upload handler\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction drawText(_helper, item) {\n    if (item instanceof Text) {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n *\n * @private\n * @param {PIXI.AbstractRenderer|PIXI.BasePrepare} helper - Not used by this upload handler\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction calculateTextStyle(_helper, item) {\n    if (item instanceof TextStyle) {\n        var font = item.toFontString();\n        TextMetrics.measureFont(font);\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to find Text objects.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Text object was found.\n */\nfunction findText(item, queue) {\n    if (item instanceof Text) {\n        // push the text style to prepare it - this can be really expensive\n        if (queue.indexOf(item.style) === -1) {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (queue.indexOf(item) === -1) {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        var texture = item._texture.baseTexture;\n        if (queue.indexOf(texture) === -1) {\n            queue.push(texture);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to find TextStyle objects.\n *\n * @private\n * @param {PIXI.TextStyle} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item, queue) {\n    if (item instanceof TextStyle) {\n        if (queue.indexOf(item) === -1) {\n            queue.push(item);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n *\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.plugins.prepare.upload(sprite, () => {\n *\n *     //Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n *\n * })\n *\n * @abstract\n * @class\n * @memberof PIXI\n */\nvar BasePrepare = /** @class */ (function () {\n    /**\n     * @param {PIXI.AbstractRenderer} renderer - A reference to the current renderer\n     */\n    function BasePrepare(renderer) {\n        var _this = this;\n        /**\n         * The limiter to be used to control how quickly items are prepared.\n         * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n         */\n        this.limiter = new CountLimiter(settings.UPLOADS_PER_FRAME);\n        /**\n         * Reference to the renderer.\n         * @type {PIXI.AbstractRenderer}\n         * @protected\n         */\n        this.renderer = renderer;\n        /**\n         * The only real difference between CanvasPrepare and Prepare is what they pass\n         * to upload hooks. That different parameter is stored here.\n         * @type {object}\n         * @protected\n         */\n        this.uploadHookHelper = null;\n        /**\n         * Collection of items to uploads at once.\n         * @type {Array<*>}\n         * @private\n         */\n        this.queue = [];\n        /**\n         * Collection of additional hooks for finding assets.\n         * @type {Array<Function>}\n         * @private\n         */\n        this.addHooks = [];\n        /**\n         * Collection of additional hooks for processing assets.\n         * @type {Array<Function>}\n         * @private\n         */\n        this.uploadHooks = [];\n        /**\n         * Callback to call after completed.\n         * @type {Array<Function>}\n         * @private\n         */\n        this.completes = [];\n        /**\n         * If prepare is ticking (running).\n         * @type {boolean}\n         * @private\n         */\n        this.ticking = false;\n        /**\n         * 'bound' call for prepareItems().\n         * @type {Function}\n         * @private\n         */\n        this.delayedTick = function () {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!_this.queue) {\n                return;\n            }\n            _this.prepareItems();\n        };\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n    /**\n     * Upload all the textures and graphics to the GPU.\n     *\n     * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n     *        Either the container or display object to search for items to upload, the items to upload themselves,\n     *        or the callback function, if items have been added using `prepare.add`.\n     * @param {Function} [done] - Optional callback when all queued uploads have completed\n     */\n    BasePrepare.prototype.upload = function (item, done) {\n        if (typeof item === 'function') {\n            done = item;\n            item = null;\n        }\n        // If a display object, search for items\n        // that we could upload\n        if (item) {\n            this.add(item);\n        }\n        // Get the items for upload from the display\n        if (this.queue.length) {\n            if (done) {\n                this.completes.push(done);\n            }\n            if (!this.ticking) {\n                this.ticking = true;\n                Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n            }\n        }\n        else if (done) {\n            done();\n        }\n    };\n    /**\n     * Handle tick update\n     *\n     * @private\n     */\n    BasePrepare.prototype.tick = function () {\n        setTimeout(this.delayedTick, 0);\n    };\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     *\n     * @private\n     */\n    BasePrepare.prototype.prepareItems = function () {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload()) {\n            var item = this.queue[0];\n            var uploaded = false;\n            if (item && !item._destroyed) {\n                for (var i = 0, len = this.uploadHooks.length; i < len; i++) {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item)) {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n            if (!uploaded) {\n                this.queue.shift();\n            }\n        }\n        // We're finished\n        if (!this.queue.length) {\n            this.ticking = false;\n            var completes = this.completes.slice(0);\n            this.completes.length = 0;\n            for (var i = 0, len = completes.length; i < len; i++) {\n                completes[i]();\n            }\n        }\n        else {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    };\n    /**\n     * Adds hooks for finding items.\n     *\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @return {this} Instance of plugin for chaining.\n     */\n    BasePrepare.prototype.registerFindHook = function (addHook) {\n        if (addHook) {\n            this.addHooks.push(addHook);\n        }\n        return this;\n    };\n    /**\n     * Adds hooks for uploading items.\n     *\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @return {this} Instance of plugin for chaining.\n     */\n    BasePrepare.prototype.registerUploadHook = function (uploadHook) {\n        if (uploadHook) {\n            this.uploadHooks.push(uploadHook);\n        }\n        return this;\n    };\n    /**\n     * Manually add an item to the uploading queue.\n     *\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @return {this} Instance of plugin for chaining.\n     */\n    BasePrepare.prototype.add = function (item) {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (var i = 0, len = this.addHooks.length; i < len; i++) {\n            if (this.addHooks[i](item, this.queue)) {\n                break;\n            }\n        }\n        // Get children recursively\n        if (item instanceof Container) {\n            for (var i = item.children.length - 1; i >= 0; i--) {\n                this.add(item.children[i]);\n            }\n        }\n        return this;\n    };\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    BasePrepare.prototype.destroy = function () {\n        if (this.ticking) {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    };\n    return BasePrepare;\n}());\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.Renderer} renderer - instance of the webgl renderer\n * @param {PIXI.BaseTexture} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(renderer, item) {\n    if (item instanceof BaseTexture) {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[renderer.CONTEXT_UID]) {\n            renderer.texture.bind(item);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.Renderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item) {\n    if (!(item instanceof Graphics)) {\n        return false;\n    }\n    var geometry = item.geometry;\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n    var batches = geometry.batches;\n    // upload all textures found in styles\n    for (var i = 0; i < batches.length; i++) {\n        var texture = batches[i].style.texture;\n        if (texture) {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable) {\n        renderer.geometry.bind(geometry, item._resolveDirectShader(renderer));\n    }\n    return true;\n}\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue) {\n    if (item instanceof Graphics) {\n        queue.push(item);\n        return true;\n    }\n    return false;\n}\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new application\n * const app = new PIXI.Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new PIXI.Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n *\n * @class\n * @extends PIXI.BasePrepare\n * @memberof PIXI\n */\nvar Prepare = /** @class */ (function (_super) {\n    __extends(Prepare, _super);\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    function Prepare(renderer) {\n        var _this = _super.call(this, renderer) || this;\n        _this.uploadHookHelper = _this.renderer;\n        // Add textures and graphics to upload\n        _this.registerFindHook(findGraphics);\n        _this.registerUploadHook(uploadBaseTextures);\n        _this.registerUploadHook(uploadGraphics);\n        return _this;\n    }\n    return Prepare;\n}(BasePrepare));\n\n/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar TimeLimiter = /** @class */ (function () {\n    /**\n     * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n     */\n    function TimeLimiter(maxMilliseconds) {\n        /**\n         * The maximum milliseconds that can be spent preparing items each frame.\n         * @type {number}\n         * @private\n         */\n        this.maxMilliseconds = maxMilliseconds;\n        /**\n         * The start time of the current frame.\n         * @type {number}\n         * @private\n         */\n        this.frameStart = 0;\n    }\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    TimeLimiter.prototype.beginFrame = function () {\n        this.frameStart = Date.now();\n    };\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    TimeLimiter.prototype.allowedToUpload = function () {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    };\n    return TimeLimiter;\n}());\n\nexport { BasePrepare, CountLimiter, Prepare, TimeLimiter };\n//# sourceMappingURL=prepare.es.js.map\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","CountLimiter","maxItemsPerFrame","this","itemsLeft","prototype","beginFrame","allowedToUpload","findMultipleBaseTextures","item","queue","result","_textures","length","i","baseTexture","indexOf","push","findBaseTexture","texture","findTexture","_texture","drawText","_helper","updateText","calculateTextStyle","font","toFontString","findText","style","findTextStyle","BasePrepare","renderer","_this","limiter","uploadHookHelper","addHooks","uploadHooks","completes","ticking","delayedTick","prepareItems","registerFindHook","registerUploadHook","upload","done","add","tick","setTimeout","uploaded","_destroyed","len","shift","slice","addHook","uploadHook","children","destroy","uploadBaseTextures","_glTextures","CONTEXT_UID","bind","uploadGraphics","geometry","finishPoly","updateBatches","batches","batchable","_resolveDirectShader","findGraphics","Prepare","_super","call","__","constructor","create","__extends","TimeLimiter","maxMilliseconds","frameStart","Date","now"],"sourceRoot":""}