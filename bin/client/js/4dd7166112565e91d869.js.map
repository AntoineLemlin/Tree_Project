{"version":3,"file":"js/4dd7166112565e91d869.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/mesh/lib/mesh.es.js"],"sourcesContent":["/*!\n * @pixi/mesh - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/mesh is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { State, Program, TextureMatrix, Shader, Buffer, Geometry } from '@pixi/core';\nimport { Point, Polygon, Matrix } from '@pixi/math';\nimport { DRAW_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { premultiplyTintToRgba } from '@pixi/utils';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nvar MeshBatchUvs = /** @class */ (function () {\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    function MeshBatchUvs(uvBuffer, uvMatrix) {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n        this._bufferUpdateId = -1;\n        this._textureUpdateId = -1;\n        this._updateID = 0;\n    }\n    /**\n     * updates\n     *\n     * @param {boolean} [forceUpdate] - force the update\n     */\n    MeshBatchUvs.prototype.update = function (forceUpdate) {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID) {\n            return;\n        }\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n        var data = this.uvBuffer.data;\n        if (!this.data || this.data.length !== data.length) {\n            this.data = new Float32Array(data.length);\n        }\n        this.uvMatrix.multiplyUvs(data, this.data);\n        this._updateID++;\n    };\n    return MeshBatchUvs;\n}());\n\nvar tempPoint = new Point();\nvar tempPolygon = new Polygon();\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar Mesh = /** @class */ (function (_super) {\n    __extends(Mesh, _super);\n    /**\n     * @param {PIXI.Geometry} geometry - the geometry the mesh will use\n     * @param {PIXI.MeshMaterial} shader - the shader the mesh will use\n     * @param {PIXI.State} [state] - the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] - the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    function Mesh(geometry, shader, state, drawMode) {\n        if (drawMode === void 0) { drawMode = DRAW_MODES.TRIANGLES; }\n        var _this = _super.call(this) || this;\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        _this.geometry = geometry;\n        geometry.refCount++;\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        _this.shader = shader;\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        _this.state = state || State.for2d();\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        _this.drawMode = drawMode;\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        _this.start = 0;\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        _this.size = 0;\n        /**\n         * thease are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        _this.uvs = null;\n        /**\n         * thease are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        _this.indices = null;\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        _this.vertexData = new Float32Array(1);\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        _this.vertexDirty = 0;\n        _this._transformID = -1;\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        _this._roundPixels = settings.ROUND_PIXELS;\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        _this.batchUvs = null;\n        return _this;\n    }\n    Object.defineProperty(Mesh.prototype, \"uvBuffer\", {\n        /**\n         * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        get: function () {\n            return this.geometry.buffers[1];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"verticesBuffer\", {\n        /**\n         * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n         * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n         * @member {PIXI.Buffer}\n         * @readonly\n         */\n        get: function () {\n            return this.geometry.buffers[0];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"material\", {\n        get: function () {\n            return this.shader;\n        },\n        /**\n         * Alias for {@link PIXI.Mesh#shader}.\n         * @member {PIXI.MeshMaterial}\n         */\n        set: function (value) {\n            this.shader = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"blendMode\", {\n        get: function () {\n            return this.state.blendMode;\n        },\n        /**\n         * The blend mode to be applied to the Mesh. Apply a value of\n         * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL;\n         * @see PIXI.BLEND_MODES\n         */\n        set: function (value) {\n            this.state.blendMode = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"roundPixels\", {\n        get: function () {\n            return this._roundPixels;\n        },\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        set: function (value) {\n            if (this._roundPixels !== value) {\n                this._transformID = -1;\n            }\n            this._roundPixels = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"tint\", {\n        /**\n         * The multiply tint applied to the Mesh. This is a hex value. A value of\n         * `0xFFFFFF` will remove any tint effect.\n         *\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        get: function () {\n            return this.shader.tint;\n        },\n        set: function (value) {\n            this.shader.tint = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Mesh.prototype, \"texture\", {\n        /**\n         * The texture that the Mesh uses.\n         *\n         * @member {PIXI.Texture}\n         */\n        get: function () {\n            return this.shader.texture;\n        },\n        set: function (value) {\n            this.shader.texture = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    Mesh.prototype._render = function (renderer) {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        var vertices = this.geometry.buffers[0].data;\n        // TODO benchmark check for attribute size..\n        if (this.shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n            this._renderToBatch(renderer);\n        }\n        else {\n            this._renderDefault(renderer);\n        }\n    };\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    Mesh.prototype._renderDefault = function (renderer) {\n        var shader = this.shader;\n        shader.alpha = this.worldAlpha;\n        if (shader.update) {\n            shader.update();\n        }\n        renderer.batch.flush();\n        if (shader.program.uniformData.translationMatrix) {\n            shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        }\n        // bind and sync uniforms..\n        renderer.shader.bind(shader);\n        // set state..\n        renderer.state.set(this.state);\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    };\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    Mesh.prototype._renderToBatch = function (renderer) {\n        var geometry = this.geometry;\n        if (this.shader.uvMatrix) {\n            this.shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data;\n        this._tintRGB = this.shader._tintRGB;\n        this._texture = this.shader.texture;\n        var pluginName = this.material.pluginName;\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    };\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    Mesh.prototype.calculateVertices = function () {\n        var geometry = this.geometry;\n        var vertices = geometry.buffers[0].data;\n        if (geometry.vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {\n            return;\n        }\n        this._transformID = this.transform._worldID;\n        if (this.vertexData.length !== vertices.length) {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n        var wt = this.transform.worldTransform;\n        var a = wt.a;\n        var b = wt.b;\n        var c = wt.c;\n        var d = wt.d;\n        var tx = wt.tx;\n        var ty = wt.ty;\n        var vertexData = this.vertexData;\n        for (var i = 0; i < vertexData.length / 2; i++) {\n            var x = vertices[(i * 2)];\n            var y = vertices[(i * 2) + 1];\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n        if (this._roundPixels) {\n            var resolution = settings.RESOLUTION;\n            for (var i = 0; i < vertexData.length; ++i) {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n        this.vertexDirty = geometry.vertexDirtyId;\n    };\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    Mesh.prototype.calculateUvs = function () {\n        var geomUvs = this.geometry.buffers[1];\n        if (!this.shader.uvMatrix.isSimple) {\n            if (!this.batchUvs) {\n                this.batchUvs = new MeshBatchUvs(geomUvs, this.shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else {\n            this.uvs = geomUvs.data;\n        }\n    };\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    Mesh.prototype._calculateBounds = function () {\n        this.calculateVertices();\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    };\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    Mesh.prototype.containsPoint = function (point) {\n        if (!this.getBounds().contains(point.x, point.y)) {\n            return false;\n        }\n        this.worldTransform.applyInverse(point, tempPoint);\n        var vertices = this.geometry.getBuffer('aVertexPosition').data;\n        var points = tempPolygon.points;\n        var indices = this.geometry.getIndex().data;\n        var len = indices.length;\n        var step = this.drawMode === 4 ? 3 : 1;\n        for (var i = 0; i + 2 < len; i += step) {\n            var ind0 = indices[i] * 2;\n            var ind1 = indices[i + 1] * 2;\n            var ind2 = indices[i + 2] * 2;\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    Mesh.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this, options);\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0) {\n            this.geometry.dispose();\n        }\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    };\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     * @memberof PIXI.Mesh\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     */\n    Mesh.BATCHABLE_SIZE = 100;\n    return Mesh;\n}(Container));\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nvar MeshMaterial = /** @class */ (function (_super) {\n    __extends(MeshMaterial, _super);\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    function MeshMaterial(uSampler, options) {\n        var _this = this;\n        var uniforms = {\n            uSampler: uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n        if (options.uniforms) {\n            Object.assign(uniforms, options.uniforms);\n        }\n        _this = _super.call(this, options.program || Program.from(vertex, fragment), uniforms) || this;\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        _this._colorDirty = false;\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        _this.uvMatrix = new TextureMatrix(uSampler);\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        _this.batchable = options.program === undefined;\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        _this.pluginName = options.pluginName;\n        _this.tint = options.tint;\n        _this.alpha = options.alpha;\n        return _this;\n    }\n    Object.defineProperty(MeshMaterial.prototype, \"texture\", {\n        /**\n         * Reference to the texture being rendered.\n         * @member {PIXI.Texture}\n         */\n        get: function () {\n            return this.uniforms.uSampler;\n        },\n        set: function (value) {\n            if (this.uniforms.uSampler !== value) {\n                this.uniforms.uSampler = value;\n                this.uvMatrix.texture = value;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MeshMaterial.prototype, \"alpha\", {\n        get: function () {\n            return this._alpha;\n        },\n        /**\n         * This gets automatically set by the object using this.\n         *\n         * @default 1\n         * @member {number}\n         */\n        set: function (value) {\n            if (value === this._alpha)\n                { return; }\n            this._alpha = value;\n            this._colorDirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MeshMaterial.prototype, \"tint\", {\n        get: function () {\n            return this._tint;\n        },\n        /**\n         * Multiply tint for the material.\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        set: function (value) {\n            if (value === this._tint)\n                { return; }\n            this._tint = value;\n            this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n            this._colorDirty = true;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    MeshMaterial.prototype.update = function () {\n        if (this._colorDirty) {\n            this._colorDirty = false;\n            var baseTexture = this.texture.baseTexture;\n            premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n        }\n        if (this.uvMatrix.update()) {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    };\n    return MeshMaterial;\n}(Shader));\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nvar MeshGeometry = /** @class */ (function (_super) {\n    __extends(MeshGeometry, _super);\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    function MeshGeometry(vertices, uvs, index) {\n        var _this = _super.call(this) || this;\n        var verticesBuffer = new Buffer(vertices);\n        var uvsBuffer = new Buffer(uvs, true);\n        var indexBuffer = new Buffer(index, true, true);\n        _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        _this._updateId = -1;\n        return _this;\n    }\n    Object.defineProperty(MeshGeometry.prototype, \"vertexDirtyId\", {\n        /**\n         * If the vertex position is updated.\n         * @member {number}\n         * @readonly\n         * @private\n         */\n        get: function () {\n            return this.buffers[0]._updateID;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return MeshGeometry;\n}(Geometry));\n\nexport { Mesh, MeshBatchUvs, MeshGeometry, MeshMaterial };\n//# sourceMappingURL=mesh.es.js.map\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","MeshBatchUvs","uvBuffer","uvMatrix","data","_bufferUpdateId","_textureUpdateId","_updateID","update","forceUpdate","length","Float32Array","multiplyUvs","tempPoint","tempPolygon","Mesh","_super","geometry","shader","state","drawMode","_this","call","refCount","start","size","uvs","indices","vertexData","vertexDirty","_transformID","_roundPixels","batchUvs","defineProperty","get","buffers","enumerable","configurable","set","value","blendMode","tint","texture","_render","renderer","vertices","batchable","BATCHABLE_SIZE","_renderToBatch","_renderDefault","alpha","worldAlpha","batch","flush","program","uniformData","translationMatrix","uniforms","transform","worldTransform","toArray","bind","draw","instanceCount","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","material","setObjectRenderer","plugins","render","vertexDirtyId","_worldID","wt","a","c","tx","ty","i","x","y","resolution","Math","round","geomUvs","isSimple","_calculateBounds","_bounds","addVertexData","containsPoint","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","destroy","options","dispose","MeshMaterial","uSampler","uTextureMatrix","uColor","assign","_colorDirty","undefined","_alpha","_tint","baseTexture","premultiplyTintToRgba","alphaMode","mapCoord","MeshGeometry","index","verticesBuffer","uvsBuffer","addAttribute","addIndex","_updateId"],"sourceRoot":""}