{"version":3,"file":"js/376acb03c46772fe9355.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/particles/lib/particles.es.js"],"sourcesContent":["/*!\n * @pixi/particles - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/particles is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { BLEND_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { hex2rgb, createIndicesForQuads, correctBlendMode, premultiplyRgba, premultiplyTint } from '@pixi/utils';\nimport { Geometry, Buffer, Shader, State, ObjectRenderer } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nvar ParticleContainer = /** @class */ (function (_super) {\n    __extends(ParticleContainer, _super);\n    /**\n     * @param {number} [maxSize=1500] - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param {object} [properties] - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    function ParticleContainer(maxSize, properties, batchSize, autoResize) {\n        if (maxSize === void 0) { maxSize = 1500; }\n        if (batchSize === void 0) { batchSize = 16384; }\n        if (autoResize === void 0) { autoResize = false; }\n        var _this = _super.call(this) || this;\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        var maxBatchSize = 16384;\n        if (batchSize > maxBatchSize) {\n            batchSize = maxBatchSize;\n        }\n        /**\n         * Set properties to be dynamic (true) / static (false)\n         *\n         * @member {boolean[]}\n         * @private\n         */\n        _this._properties = [false, true, false, false, false];\n        /**\n         * @member {number}\n         * @private\n         */\n        _this._maxSize = maxSize;\n        /**\n         * @member {number}\n         * @private\n         */\n        _this._batchSize = batchSize;\n        /**\n         * @member {Array<PIXI.Buffer>}\n         * @private\n         */\n        _this._buffers = null;\n        /**\n         * for every batch stores _updateID corresponding to the last change in that batch\n         * @member {number[]}\n         * @private\n         */\n        _this._bufferUpdateIDs = [];\n        /**\n         * when child inserted, removed or changes position this number goes up\n         * @member {number[]}\n         * @private\n         */\n        _this._updateID = 0;\n        /**\n         * @member {boolean}\n         *\n         */\n        _this.interactiveChildren = false;\n        /**\n         * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n         * to reset the blend mode.\n         *\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NORMAL\n         * @see PIXI.BLEND_MODES\n         */\n        _this.blendMode = BLEND_MODES.NORMAL;\n        /**\n         * If true, container allocates more batches in case there are more than `maxSize` particles.\n         * @member {boolean}\n         * @default false\n         */\n        _this.autoResize = autoResize;\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * Default to true here as performance is usually the priority for particles.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        _this.roundPixels = true;\n        /**\n         * The texture used to render the children.\n         *\n         * @readonly\n         * @member {PIXI.BaseTexture}\n         */\n        _this.baseTexture = null;\n        _this.setProperties(properties);\n        /**\n         * The tint applied to the container.\n         * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n         *\n         * @private\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        _this._tint = 0;\n        _this.tintRgb = new Float32Array(4);\n        _this.tint = 0xFFFFFF;\n        return _this;\n    }\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param {object} properties - The properties to be uploaded\n     */\n    ParticleContainer.prototype.setProperties = function (properties) {\n        if (properties) {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    };\n    /**\n     * Updates the object transform for rendering\n     *\n     * @private\n     */\n    ParticleContainer.prototype.updateTransform = function () {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    };\n    Object.defineProperty(ParticleContainer.prototype, \"tint\", {\n        /**\n         * The tint applied to the container. This is a hex value.\n         * A value of 0xFFFFFF will remove any tint effect.\n         ** IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n         * @member {number}\n         * @default 0xFFFFFF\n         */\n        get: function () {\n            return this._tint;\n        },\n        set: function (value) {\n            this._tint = value;\n            hex2rgb(value, this.tintRgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Renders the container using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The webgl renderer\n     */\n    ParticleContainer.prototype.render = function (renderer) {\n        var _this = this;\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n            return;\n        }\n        if (!this.baseTexture) {\n            this.baseTexture = this.children[0]._texture.baseTexture;\n            if (!this.baseTexture.valid) {\n                this.baseTexture.once('update', function () { return _this.onChildrenChange(0); });\n            }\n        }\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    };\n    /**\n     * Set the flag that static data should be updated to true\n     *\n     * @private\n     * @param {number} smallestChildIndex - The smallest child index\n     */\n    ParticleContainer.prototype.onChildrenChange = function (smallestChildIndex) {\n        var bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n        while (this._bufferUpdateIDs.length < bufferIndex) {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    };\n    ParticleContainer.prototype.dispose = function () {\n        if (this._buffers) {\n            for (var i = 0; i < this._buffers.length; ++i) {\n                this._buffers[i].destroy();\n            }\n            this._buffers = null;\n        }\n    };\n    /**\n     * Destroys the container\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    ParticleContainer.prototype.destroy = function (options) {\n        _super.prototype.destroy.call(this, options);\n        this.dispose();\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    };\n    return ParticleContainer;\n}(Container));\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @class\n * @private\n * @memberof PIXI\n */\nvar ParticleBuffer = /** @class */ (function () {\n    /**\n     * @private\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    function ParticleBuffer(properties, dynamicPropertyFlags, size) {\n        this.geometry = new Geometry();\n        this.indexBuffer = null;\n        /**\n         * The number of particles the buffer can hold\n         *\n         * @private\n         * @member {number}\n         */\n        this.size = size;\n        /**\n         * A list of the properties that are dynamic.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.dynamicProperties = [];\n        /**\n         * A list of the properties that are static.\n         *\n         * @private\n         * @member {object[]}\n         */\n        this.staticProperties = [];\n        for (var i = 0; i < properties.length; ++i) {\n            var property = properties[i];\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n            if (dynamicPropertyFlags[i]) {\n                this.dynamicProperties.push(property);\n            }\n            else {\n                this.staticProperties.push(property);\n            }\n        }\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n        this._updateID = 0;\n        this.initBuffers();\n    }\n    /**\n     * Sets up the renderer context and necessary buffers.\n     *\n     * @private\n     */\n    ParticleBuffer.prototype.initBuffers = function () {\n        var geometry = this.geometry;\n        var dynamicOffset = 0;\n        /**\n         * Holds the indices of the geometry (quads) to draw\n         *\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indexBuffer = new Buffer(createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n        this.dynamicStride = 0;\n        for (var i = 0; i < this.dynamicProperties.length; ++i) {\n            var property = this.dynamicProperties[i];\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n        var dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n        // static //\n        var staticOffset = 0;\n        this.staticStride = 0;\n        for (var i = 0; i < this.staticProperties.length; ++i) {\n            var property = this.staticProperties[i];\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n        var statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n        for (var i = 0; i < this.dynamicProperties.length; ++i) {\n            var property = this.dynamicProperties[i];\n            geometry.addAttribute(property.attributeName, this.dynamicBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.dynamicStride * 4, property.offset * 4);\n        }\n        for (var i = 0; i < this.staticProperties.length; ++i) {\n            var property = this.staticProperties[i];\n            geometry.addAttribute(property.attributeName, this.staticBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.staticStride * 4, property.offset * 4);\n        }\n    };\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    ParticleBuffer.prototype.uploadDynamic = function (children, startIndex, amount) {\n        for (var i = 0; i < this.dynamicProperties.length; i++) {\n            var property = this.dynamicProperties[i];\n            property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n        }\n        this.dynamicBuffer._updateID++;\n    };\n    /**\n     * Uploads the static properties.\n     *\n     * @private\n     * @param {PIXI.DisplayObject[]} children - The children to upload.\n     * @param {number} startIndex - The index to start at.\n     * @param {number} amount - The number to upload.\n     */\n    ParticleBuffer.prototype.uploadStatic = function (children, startIndex, amount) {\n        for (var i = 0; i < this.staticProperties.length; i++) {\n            var property = this.staticProperties[i];\n            property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n        }\n        this.staticBuffer._updateID++;\n    };\n    /**\n     * Destroys the ParticleBuffer.\n     *\n     * @private\n     */\n    ParticleBuffer.prototype.destroy = function () {\n        this.indexBuffer = null;\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    };\n    return ParticleBuffer;\n}());\n\nvar fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPositionCoord;\\nattribute float aRotation;\\n\\nuniform mat3 translationMatrix;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nvoid main(void){\\n    float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);\\n    float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPositionCoord;\\n\\n    gl_Position = vec4((translationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vColor = aColor * uColor;\\n}\\n\";\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @class\n * @memberof PIXI\n */\nvar ParticleRenderer = /** @class */ (function (_super) {\n    __extends(ParticleRenderer, _super);\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this sprite batch works for.\n     */\n    function ParticleRenderer(renderer) {\n        var _this = _super.call(this, renderer) || this;\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n        /**\n         * The default shader that is used if a sprite doesn't have a more specific one.\n         *\n         * @member {PIXI.Shader}\n         */\n        _this.shader = null;\n        _this.properties = null;\n        _this.tempMatrix = new Matrix();\n        _this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: _this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: _this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: _this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: _this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: TYPES.UNSIGNED_BYTE,\n                uploadFunction: _this.uploadTint,\n                offset: 0,\n            } ];\n        _this.shader = Shader.from(vertex, fragment, {});\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        _this.state = State.for2d();\n        return _this;\n    }\n    /**\n     * Renders the particle container object.\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     */\n    ParticleRenderer.prototype.render = function (container) {\n        var children = container.children;\n        var maxSize = container._maxSize;\n        var batchSize = container._batchSize;\n        var renderer = this.renderer;\n        var totalChildren = children.length;\n        if (totalChildren === 0) {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize) {\n            totalChildren = maxSize;\n        }\n        var buffers = container._buffers;\n        if (!buffers) {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n        var baseTexture = children[0]._texture.baseTexture;\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = correctBlendMode(container.blendMode, baseTexture.alphaMode);\n        renderer.state.set(this.state);\n        var gl = renderer.gl;\n        var m = container.worldTransform.copyTo(this.tempMatrix);\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n        this.shader.uniforms.uColor = premultiplyRgba(container.tintRgb, container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n        this.shader.uniforms.uSampler = baseTexture;\n        this.renderer.shader.bind(this.shader);\n        var updateStatic = false;\n        // now lets upload and render the buffers..\n        for (var i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {\n            var amount = (totalChildren - i);\n            if (amount > batchSize) {\n                amount = batchSize;\n            }\n            if (j >= buffers.length) {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n            var buffer = buffers[j];\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n            var bid = container._bufferUpdateIDs[j] || 0;\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic) {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    };\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer[]} The buffers\n     * @private\n     */\n    ParticleRenderer.prototype.generateBuffers = function (container) {\n        var buffers = [];\n        var size = container._maxSize;\n        var batchSize = container._batchSize;\n        var dynamicPropertyFlags = container._properties;\n        for (var i = 0; i < size; i += batchSize) {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n        return buffers;\n    };\n    /**\n     * Creates one more particle buffer, because container has autoResize feature\n     *\n     * @param {PIXI.ParticleContainer} container - The container to render using this ParticleRenderer\n     * @return {PIXI.ParticleBuffer} generated buffer\n     * @private\n     */\n    ParticleRenderer.prototype._generateOneMoreBuffer = function (container) {\n        var batchSize = container._batchSize;\n        var dynamicPropertyFlags = container._properties;\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    };\n    /**\n     * Uploads the vertices.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their vertices uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadVertices = function (children, startIndex, amount, array, stride, offset) {\n        var w0 = 0;\n        var w1 = 0;\n        var h0 = 0;\n        var h1 = 0;\n        for (var i = 0; i < amount; ++i) {\n            var sprite = children[startIndex + i];\n            var texture = sprite._texture;\n            var sx = sprite.scale.x;\n            var sy = sprite.scale.y;\n            var trim = texture.trim;\n            var orig = texture.orig;\n            if (trim) {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Uploads the position.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their positions uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadPosition = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; i++) {\n            var spritePosition = children[startIndex + i].position;\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Uploads the rotation.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadRotation = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; i++) {\n            var spriteRotation = children[startIndex + i].rotation;\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Uploads the Uvs\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadUvs = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; ++i) {\n            var textureUvs = children[startIndex + i]._texture._uvs;\n            if (textureUvs) {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n                offset += stride * 4;\n            }\n            else {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n                offset += stride * 4;\n            }\n        }\n    };\n    /**\n     * Uploads the tint.\n     *\n     * @param {PIXI.DisplayObject[]} children - the array of display objects to render\n     * @param {number} startIndex - the index to start from in the children array\n     * @param {number} amount - the amount of children that will have their rotation uploaded\n     * @param {number[]} array - The vertices to upload.\n     * @param {number} stride - Stride to use for iteration.\n     * @param {number} offset - Offset to start at.\n     */\n    ParticleRenderer.prototype.uploadTint = function (children, startIndex, amount, array, stride, offset) {\n        for (var i = 0; i < amount; ++i) {\n            var sprite = children[startIndex + i];\n            var premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n            var alpha = sprite.alpha;\n            // we dont call extra function if alpha is 1.0, that's faster\n            var argb = alpha < 1.0 && premultiplied\n                ? premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n            array[offset] = argb;\n            array[offset + stride] = argb;\n            array[offset + (stride * 2)] = argb;\n            array[offset + (stride * 3)] = argb;\n            offset += stride * 4;\n        }\n    };\n    /**\n     * Destroys the ParticleRenderer.\n     */\n    ParticleRenderer.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        if (this.shader) {\n            this.shader.destroy();\n            this.shader = null;\n        }\n        this.tempMatrix = null;\n    };\n    return ParticleRenderer;\n}(ObjectRenderer));\n\nexport { ParticleContainer, ParticleRenderer };\n//# sourceMappingURL=particles.es.js.map\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ParticleContainer","_super","maxSize","properties","batchSize","autoResize","_this","call","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","roundPixels","baseTexture","setProperties","_tint","tintRgb","Float32Array","tint","vertices","scale","position","rotation","uvs","alpha","updateTransform","displayObjectUpdateTransform","defineProperty","get","set","value","hex2rgb","enumerable","configurable","render","renderer","visible","worldAlpha","children","length","renderable","_texture","valid","once","onChildrenChange","batch","setObjectRenderer","plugins","particle","smallestChildIndex","bufferIndex","Math","floor","push","dispose","i","destroy","options","ParticleBuffer","dynamicPropertyFlags","size","geometry","indexBuffer","dynamicProperties","staticProperties","property","attributeName","uploadFunction","type","offset","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","initBuffers","dynamicOffset","createIndicesForQuads","addIndex","dynBuffer","ArrayBuffer","Uint32Array","staticOffset","statBuffer","addAttribute","uploadDynamic","startIndex","amount","uploadStatic","ParticleRenderer","shader","tempMatrix","uploadVertices","uploadPosition","uploadRotation","uploadUvs","uploadTint","state","container","totalChildren","buffers","generateBuffers","correctBlendMode","alphaMode","gl","m","worldTransform","copyTo","prepend","globalUniforms","uniforms","projectionMatrix","translationMatrix","toArray","uColor","premultiplyRgba","uSampler","bind","updateStatic","j","_generateOneMoreBuffer","buffer","bid","drawElements","TRIANGLES","UNSIGNED_SHORT","array","stride","w0","w1","h0","h1","sprite","texture","sx","x","sy","y","trim","orig","anchor","width","height","spritePosition","spriteRotation","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","premultiplied","argb","premultiplyTint","_tintRGB"],"sourceRoot":""}