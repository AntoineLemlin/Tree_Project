{"version":3,"file":"js/d06c874e18a0c658f260.js","mappings":";4HAoCIA,YAlBJ,gBAAuB,IAmBvB,SAAWA,GACPA,EAAgBA,EAA6B,YAAI,IAAM,cACvDA,EAAgBA,EAAsB,KAAI,IAAM,OAChDA,EAAgBA,EAAwB,OAAI,GAAK,SACjDA,EAAgBA,EAAqB,KAAK,IAAM,MAChDA,EAAgBA,EAAyB,SAAK,IAAM,UALxD,CAMGA,IAAoBA,EAAkB,KASzC,IAAIC,EAAgC,WAShC,SAASA,EAAeC,EAAIC,EAASC,EAAUC,QAC3B,IAAZF,IAAsBA,EAAU,WACnB,IAAbC,IAAuBA,EAAW,QACzB,IAATC,IAAmBA,GAAO,GAM9BC,KAAKJ,GAAKA,EAMVI,KAAKH,QAAUA,EAMfG,KAAKF,SAAWA,EAMhBE,KAAKD,KAAOA,EAMZC,KAAKC,KAAO,KAMZD,KAAKE,SAAW,KAMhBF,KAAKG,YAAa,EA8EtB,OArEAR,EAAeS,UAAUC,MAAQ,SAAUT,EAAIC,GAE3C,YADgB,IAAZA,IAAsBA,EAAU,MAC7BG,KAAKJ,KAAOA,GAAMI,KAAKH,UAAYA,GAQ9CF,EAAeS,UAAUE,KAAO,SAAUC,GAClCP,KAAKJ,KACDI,KAAKH,QACLG,KAAKJ,GAAGY,KAAKR,KAAKH,QAASU,GAG3BP,KAAKJ,GAAGW,IAGhB,IAAIE,EAAWT,KAAKC,KASpB,OARID,KAAKD,MACLC,KAAKU,SAAQ,GAIbV,KAAKG,aACLH,KAAKC,KAAO,MAETQ,GAOXd,EAAeS,UAAUO,QAAU,SAAUT,GACzCF,KAAKE,SAAWA,EACZA,EAASD,OACTC,EAASD,KAAKC,SAAWF,MAE7BA,KAAKC,KAAOC,EAASD,KACrBC,EAASD,KAAOD,MASpBL,EAAeS,UAAUM,QAAU,SAAUE,QAC5B,IAATA,IAAmBA,GAAO,GAC9BZ,KAAKG,YAAa,EAClBH,KAAKJ,GAAK,KACVI,KAAKH,QAAU,KAEXG,KAAKE,WACLF,KAAKE,SAASD,KAAOD,KAAKC,MAE1BD,KAAKC,OACLD,KAAKC,KAAKC,SAAWF,KAAKE,UAG9B,IAAIO,EAAWT,KAAKC,KAIpB,OAFAD,KAAKC,KAAOW,EAAO,KAAOH,EAC1BT,KAAKE,SAAW,KACTO,GAEJd,EApIwB,GAgJ/BkB,EAAwB,WACxB,SAASA,IACL,IAAIC,EAAQd,KAMZA,KAAKe,MAAQ,IAAIpB,EAAe,KAAM,KAAMqB,EAAAA,GAM5ChB,KAAKiB,WAAa,KAOlBjB,KAAKkB,cAAgB,IAOrBlB,KAAKmB,cAAgB,EASrBnB,KAAKoB,WAAY,EAUjBpB,KAAKO,UAAY,EAajBP,KAAKqB,QAAU,EAAI,gBAYnBrB,KAAKsB,UAAY,EAAI,gBAWrBtB,KAAKuB,UAAY,EAWjBvB,KAAKwB,MAAQ,EAYbxB,KAAKyB,SAAU,EAOfzB,KAAK0B,YAAa,EAQlB1B,KAAK2B,YAAc,EAYnB3B,KAAK4B,MAAQ,SAAUC,GACnBf,EAAMG,WAAa,KACfH,EAAMW,UAENX,EAAMgB,OAAOD,GAETf,EAAMW,SAAgC,OAArBX,EAAMG,YAAuBH,EAAMC,MAAMd,OAC1Da,EAAMG,WAAac,sBAAsBjB,EAAMc,UAuZ/D,OA3YAf,EAAOT,UAAU4B,iBAAmB,WACR,OAApBhC,KAAKiB,YAAuBjB,KAAKe,MAAMd,OAEvCD,KAAKuB,SAAWU,YAAYC,MAC5BlC,KAAK2B,WAAa3B,KAAKuB,SACvBvB,KAAKiB,WAAac,sBAAsB/B,KAAK4B,SAQrDf,EAAOT,UAAU+B,gBAAkB,WACP,OAApBnC,KAAKiB,aACLmB,qBAAqBpC,KAAKiB,YAC1BjB,KAAKiB,WAAa,OAa1BJ,EAAOT,UAAUiC,iBAAmB,WAC5BrC,KAAKyB,QACLzB,KAAKgC,mBAEAhC,KAAKoB,WACVpB,KAAKsC,SAYbzB,EAAOT,UAAUmC,IAAM,SAAU3C,EAAIC,EAASC,GAE1C,YADiB,IAAbA,IAAuBA,EAAWJ,EAAgB8C,QAC/CxC,KAAKyC,aAAa,IAAI9C,EAAeC,EAAIC,EAASC,KAU7De,EAAOT,UAAUsC,QAAU,SAAU9C,EAAIC,EAASC,GAE9C,YADiB,IAAbA,IAAuBA,EAAWJ,EAAgB8C,QAC/CxC,KAAKyC,aAAa,IAAI9C,EAAeC,EAAIC,EAASC,GAAU,KAWvEe,EAAOT,UAAUqC,aAAe,SAAUE,GAEtC,IAAIC,EAAU5C,KAAKe,MAAMd,KACrBC,EAAWF,KAAKe,MAEpB,GAAK6B,EAGA,CAED,KAAOA,GAAS,CACZ,GAAID,EAAS7C,SAAW8C,EAAQ9C,SAAU,CACtC6C,EAAShC,QAAQT,GACjB,MAEJA,EAAW0C,EACXA,EAAUA,EAAQ3C,KAGjB0C,EAASzC,UACVyC,EAAShC,QAAQT,QAdrByC,EAAShC,QAAQT,GAkBrB,OADAF,KAAKqC,mBACErC,MAUXa,EAAOT,UAAUyC,OAAS,SAAUjD,EAAIC,GAEpC,IADA,IAAI8C,EAAW3C,KAAKe,MAAMd,KACnB0C,GAKCA,EADAA,EAAStC,MAAMT,EAAIC,GACR8C,EAASjC,UAGTiC,EAAS1C,KAM5B,OAHKD,KAAKe,MAAMd,MACZD,KAAKmC,kBAEFnC,MAEX8C,OAAOC,eAAelC,EAAOT,UAAW,QAAS,CAO7C4C,IAAK,WACD,IAAKhD,KAAKe,MACN,OAAO,EAIX,IAFA,IAAIkC,EAAQ,EACRL,EAAU5C,KAAKe,MACX6B,EAAUA,EAAQ3C,MACtBgD,IAEJ,OAAOA,GAEXC,YAAY,EACZC,cAAc,IAMlBtC,EAAOT,UAAUkC,MAAQ,WAChBtC,KAAKyB,UACNzB,KAAKyB,SAAU,EACfzB,KAAKgC,qBAObnB,EAAOT,UAAUgD,KAAO,WAChBpD,KAAKyB,UACLzB,KAAKyB,SAAU,EACfzB,KAAKmC,oBAObtB,EAAOT,UAAUM,QAAU,WACvB,IAAKV,KAAK0B,WAAY,CAClB1B,KAAKoD,OAEL,IADA,IAAIT,EAAW3C,KAAKe,MAAMd,KACnB0C,GACHA,EAAWA,EAASjC,SAAQ,GAEhCV,KAAKe,MAAML,UACXV,KAAKe,MAAQ,OAgBrBF,EAAOT,UAAU0B,OAAS,SAAUuB,GAEhC,IAAI/B,EAeJ,QAhBoB,IAAhB+B,IAA0BA,EAAcpB,YAAYC,OAgBpDmB,EAAcrD,KAAKuB,SAAU,CAW7B,IATAD,EAAYtB,KAAKsB,UAAY+B,EAAcrD,KAAKuB,UAEhCvB,KAAKkB,gBACjBI,EAAYtB,KAAKkB,eAErBI,GAAatB,KAAKwB,MAIdxB,KAAKmB,cAAe,CACpB,IAAImC,EAAQD,EAAcrD,KAAK2B,WAAa,EAC5C,GAAI2B,EAAQtD,KAAKmB,cACb,OAEJnB,KAAK2B,WAAa0B,EAAeC,EAAQtD,KAAKmB,cAElDnB,KAAKqB,QAAUC,EACftB,KAAKO,UAAYP,KAAKqB,QAAU,gBAMhC,IAHA,IAAIkC,EAAOvD,KAAKe,MAEZ4B,EAAWY,EAAKtD,KACb0C,GACHA,EAAWA,EAASrC,KAAKN,KAAKO,WAE7BgD,EAAKtD,MACND,KAAKmC,uBAITnC,KAAKO,UAAYP,KAAKqB,QAAUrB,KAAKsB,UAAY,EAErDtB,KAAKuB,SAAW8B,GAEpBP,OAAOC,eAAelC,EAAOT,UAAW,MAAO,CAW3C4C,IAAK,WACD,OAAO,IAAOhD,KAAKsB,WAEvB4B,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAelC,EAAOT,UAAW,SAAU,CAY9C4C,IAAK,WACD,OAAO,IAAOhD,KAAKkB,eAEvBsC,IAAK,SAAUC,GAEX,IAAIC,EAASC,KAAKC,IAAI5D,KAAK6D,OAAQJ,GAE/BK,EAAUH,KAAKC,IAAID,KAAKI,IAAI,EAAGL,GAAU,IAAM,iBACnD1D,KAAKkB,cAAgB,EAAI4C,GAE7BZ,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAelC,EAAOT,UAAW,SAAU,CAW9C4C,IAAK,WACD,OAAIhD,KAAKmB,cACEwC,KAAKK,MAAM,IAAOhE,KAAKmB,eAE3B,GAEXqC,IAAK,SAAUC,GACX,GAAY,IAARA,EACAzD,KAAKmB,cAAgB,MAEpB,CAED,IAAI0C,EAASF,KAAKI,IAAI/D,KAAK0D,OAAQD,GACnCzD,KAAKmB,cAAgB,GAAK0C,EAAS,OAG3CX,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAelC,EAAQ,SAAU,CA4CpCmC,IAAK,WACD,IAAKnC,EAAOoD,QAAS,CACjB,IAAIC,EAASrD,EAAOoD,QAAU,IAAIpD,EAClCqD,EAAO9C,WAAY,EACnB8C,EAAOxC,YAAa,EAExB,OAAOb,EAAOoD,SAElBf,YAAY,EACZC,cAAc,IAElBL,OAAOC,eAAelC,EAAQ,SAAU,CAWpCmC,IAAK,WACD,IAAKnC,EAAOsD,QAAS,CACjB,IAAIC,EAASvD,EAAOsD,QAAU,IAAItD,EAClCuD,EAAOhD,WAAY,EACnBgD,EAAO1C,YAAa,EAExB,OAAOb,EAAOsD,SAElBjB,YAAY,EACZC,cAAc,IAEXtC,EAniBgB,GAijBvBwD,EAA8B,WAC9B,SAASA,KAmFT,OA1EAA,EAAaC,KAAO,SAAUC,GAC1B,IAAIzD,EAAQd,KAEZuE,EAAUzB,OAAO0B,OAAO,CACpBpD,WAAW,EACXqD,cAAc,GACfF,GAEHzB,OAAOC,eAAe/C,KAAM,SAAU,CAClCwD,IAAK,SAAUkB,GACP1E,KAAK2E,SACL3E,KAAK2E,QAAQ9B,OAAO7C,KAAK4E,OAAQ5E,MAErCA,KAAK2E,QAAUD,EACXA,GACAA,EAAOnC,IAAIvC,KAAK4E,OAAQ5E,KAAMN,EAAgBmF,MAGtD7B,IAAK,WACD,OAAOhD,KAAK2E,WAQpB3E,KAAKoD,KAAO,WACRtC,EAAM6D,QAAQvB,QAOlBpD,KAAKsC,MAAQ,WACTxB,EAAM6D,QAAQrC,SAUlBtC,KAAK2E,QAAU,KASf3E,KAAK0E,OAASH,EAAQE,aAAe5D,EAAOqD,OAAS,IAAIrD,EAErD0D,EAAQnD,WACRpB,KAAKsC,SASb+B,EAAa3D,QAAU,WACnB,GAAIV,KAAK2E,QAAS,CACd,IAAIG,EAAY9E,KAAK2E,QACrB3E,KAAK0E,OAAS,KACdI,EAAUpE,YAGX2D,EApFsB","sources":["webpack:///../../node_modules/@pixi/ticker/lib/ticker.es.js"],"sourcesContent":["/*!\n * @pixi/ticker - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/ticker is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\n/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nvar UPDATE_PRIORITY;\n(function (UPDATE_PRIORITY) {\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"INTERACTION\"] = 50] = \"INTERACTION\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"HIGH\"] = 25] = \"HIGH\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"NORMAL\"] = 0] = \"NORMAL\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"LOW\"] = -25] = \"LOW\";\n    UPDATE_PRIORITY[UPDATE_PRIORITY[\"UTILITY\"] = -50] = \"UTILITY\";\n})(UPDATE_PRIORITY || (UPDATE_PRIORITY = {}));\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */\nvar TickerListener = /** @class */ (function () {\n    /**\n     * Constructor\n     * @private\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {*} [context=null] - The listener context\n     * @param {number} [priority=0] - The priority for emitting\n     * @param {boolean} [once=false] - If the handler should fire once\n     */\n    function TickerListener(fn, context, priority, once) {\n        if (context === void 0) { context = null; }\n        if (priority === void 0) { priority = 0; }\n        if (once === void 0) { once = false; }\n        /**\n         * The handler function to execute.\n         * @private\n         * @member {Function}\n         */\n        this.fn = fn;\n        /**\n         * The calling to execute.\n         * @private\n         * @member {*}\n         */\n        this.context = context;\n        /**\n         * The current priority.\n         * @private\n         * @member {number}\n         */\n        this.priority = priority;\n        /**\n         * If this should only execute once.\n         * @private\n         * @member {boolean}\n         */\n        this.once = once;\n        /**\n         * The next item in chain.\n         * @private\n         * @member {TickerListener}\n         */\n        this.next = null;\n        /**\n         * The previous item in chain.\n         * @private\n         * @member {TickerListener}\n         */\n        this.previous = null;\n        /**\n         * `true` if this listener has been destroyed already.\n         * @member {boolean}\n         * @private\n         */\n        this._destroyed = false;\n    }\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {any} [context] - The listener context\n     * @return {boolean} `true` if the listener match the arguments\n     */\n    TickerListener.prototype.match = function (fn, context) {\n        if (context === void 0) { context = null; }\n        return this.fn === fn && this.context === context;\n    };\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param {number} deltaTime - time since the last emit.\n     * @return {TickerListener} Next ticker\n     */\n    TickerListener.prototype.emit = function (deltaTime) {\n        if (this.fn) {\n            if (this.context) {\n                this.fn.call(this.context, deltaTime);\n            }\n            else {\n                this.fn(deltaTime);\n            }\n        }\n        var redirect = this.next;\n        if (this.once) {\n            this.destroy(true);\n        }\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed) {\n            this.next = null;\n        }\n        return redirect;\n    };\n    /**\n     * Connect to the list.\n     * @private\n     * @param {TickerListener} previous - Input node, previous listener\n     */\n    TickerListener.prototype.connect = function (previous) {\n        this.previous = previous;\n        if (previous.next) {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    };\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param {boolean} [hard = false] `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @return {TickerListener} The listener to redirect while emitting or removing.\n     */\n    TickerListener.prototype.destroy = function (hard) {\n        if (hard === void 0) { hard = false; }\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n        // Disconnect, hook up next and previous\n        if (this.previous) {\n            this.previous.next = this.next;\n        }\n        if (this.next) {\n            this.next.previous = this.previous;\n        }\n        // Redirect to the next item\n        var redirect = this.next;\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n        return redirect;\n    };\n    return TickerListener;\n}());\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */\nvar Ticker = /** @class */ (function () {\n    function Ticker() {\n        var _this = this;\n        /**\n         * The first listener. All new listeners added are chained on this.\n         * @private\n         * @type {TickerListener}\n         */\n        this._head = new TickerListener(null, null, Infinity);\n        /**\n         * Internal current frame request ID\n         * @type {?number}\n         * @private\n         */\n        this._requestId = null;\n        /**\n         * Internal value managed by minFPS property setter and getter.\n         * This is the maximum allowed milliseconds between updates.\n         * @type {number}\n         * @private\n         */\n        this._maxElapsedMS = 100;\n        /**\n         * Internal value managed by maxFPS property setter and getter.\n         * This is the minimum allowed milliseconds between updates.\n         * @type {number}\n         * @private\n         */\n        this._minElapsedMS = 0;\n        /**\n         * Whether or not this ticker should invoke the method\n         * {@link PIXI.Ticker#start} automatically\n         * when a listener is added.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.autoStart = false;\n        /**\n         * Scalar time value from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.deltaTime = 1;\n        /**\n         * Scaler time elapsed in milliseconds from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         * Defaults to target frame time\n         *\n         * @member {number}\n         * @default 16.66\n         */\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n        /**\n         * Time elapsed in milliseconds from last frame to this frame.\n         * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n         * is based, this value is neither capped nor scaled.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         * Defaults to target frame time\n         *\n         * @member {number}\n         * @default 16.66\n         */\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n        /**\n         * The last time {@link PIXI.Ticker#update} was invoked.\n         * This value is also reset internally outside of invoking\n         * update, but only when a new animation frame is requested.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         *\n         * @member {number}\n         * @default -1\n         */\n        this.lastTime = -1;\n        /**\n         * Factor of current {@link PIXI.Ticker#deltaTime}.\n         * @example\n         * // Scales ticker.deltaTime to what would be\n         * // the equivalent of approximately 120 FPS\n         * ticker.speed = 2;\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.speed = 1;\n        /**\n         * Whether or not this ticker has been started.\n         * `true` if {@link PIXI.Ticker#start} has been called.\n         * `false` if {@link PIXI.Ticker#stop} has been called.\n         * While `false`, this value may change to `true` in the\n         * event of {@link PIXI.Ticker#autoStart} being `true`\n         * and a listener is added.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.started = false;\n        /**\n         * If enabled, deleting is disabled.\n         * @member {boolean}\n         * @default false\n         * @private\n         */\n        this._protected = false;\n        /**\n         * The last time keyframe was executed.\n         * Maintains a relatively fixed interval with the previous value.\n         * @member {number}\n         * @default -1\n         * @private\n         */\n        this._lastFrame = -1;\n        /**\n         * Internal tick method bound to ticker instance.\n         * This is because in early 2015, Function.bind\n         * is still 60% slower in high performance scenarios.\n         * Also separating frame requests from update method\n         * so listeners may be called at any time and with\n         * any animation API, just invoke ticker.update(time).\n         *\n         * @private\n         * @param {number} time - Time since last tick.\n         */\n        this._tick = function (time) {\n            _this._requestId = null;\n            if (_this.started) {\n                // Invoke listeners now\n                _this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (_this.started && _this._requestId === null && _this._head.next) {\n                    _this._requestId = requestAnimationFrame(_this._tick);\n                }\n            }\n        };\n    }\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     *\n     * @private\n     */\n    Ticker.prototype._requestIfNeeded = function () {\n        if (this._requestId === null && this._head.next) {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    };\n    /**\n     * Conditionally cancels a pending animation frame.\n     *\n     * @private\n     */\n    Ticker.prototype._cancelIfNeeded = function () {\n        if (this._requestId !== null) {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    };\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     *\n     * @private\n     */\n    Ticker.prototype._startIfPossible = function () {\n        if (this.started) {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart) {\n            this.start();\n        }\n    };\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     *\n     * @param {Function} fn - The listener function to be added for updates\n     * @param {*} [context] - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    Ticker.prototype.add = function (fn, context, priority) {\n        if (priority === void 0) { priority = UPDATE_PRIORITY.NORMAL; }\n        return this._addListener(new TickerListener(fn, context, priority));\n    };\n    /**\n     * Add a handler for the tick event which is only execute once.\n     *\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {*} [context] - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    Ticker.prototype.addOnce = function (fn, context, priority) {\n        if (priority === void 0) { priority = UPDATE_PRIORITY.NORMAL; }\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    };\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     *\n     * @private\n     * @param {TickerListener} listener - Current listener being added.\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    Ticker.prototype._addListener = function (listener) {\n        // For attaching to head\n        var current = this._head.next;\n        var previous = this._head;\n        // Add the first item\n        if (!current) {\n            listener.connect(previous);\n        }\n        else {\n            // Go from highest to lowest priority\n            while (current) {\n                if (listener.priority > current.priority) {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n            // Not yet connected\n            if (!listener.previous) {\n                listener.connect(previous);\n            }\n        }\n        this._startIfPossible();\n        return this;\n    };\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     *\n     * @param {Function} fn - The listener function to be removed\n     * @param {*} [context] - The listener context to be removed\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    Ticker.prototype.remove = function (fn, context) {\n        var listener = this._head.next;\n        while (listener) {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context)) {\n                listener = listener.destroy();\n            }\n            else {\n                listener = listener.next;\n            }\n        }\n        if (!this._head.next) {\n            this._cancelIfNeeded();\n        }\n        return this;\n    };\n    Object.defineProperty(Ticker.prototype, \"count\", {\n        /**\n         * The number of listeners on this ticker, calculated by walking through linked list\n         *\n         * @readonly\n         * @member {number}\n         */\n        get: function () {\n            if (!this._head) {\n                return 0;\n            }\n            var count = 0;\n            var current = this._head;\n            while ((current = current.next)) {\n                count++;\n            }\n            return count;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Starts the ticker. If the ticker has listeners\n     * a new animation frame is requested at this point.\n     */\n    Ticker.prototype.start = function () {\n        if (!this.started) {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    };\n    /**\n     * Stops the ticker. If the ticker has requested\n     * an animation frame it is canceled at this point.\n     */\n    Ticker.prototype.stop = function () {\n        if (this.started) {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    };\n    /**\n     * Destroy the ticker and don't use after this. Calling\n     * this method removes all references to internal events.\n     */\n    Ticker.prototype.destroy = function () {\n        if (!this._protected) {\n            this.stop();\n            var listener = this._head.next;\n            while (listener) {\n                listener = listener.destroy(true);\n            }\n            this._head.destroy();\n            this._head = null;\n        }\n    };\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     *\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    Ticker.prototype.update = function (currentTime) {\n        if (currentTime === void 0) { currentTime = performance.now(); }\n        var elapsedMS;\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n        if (currentTime > this.lastTime) {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS) {\n                elapsedMS = this._maxElapsedMS;\n            }\n            elapsedMS *= this.speed;\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS) {\n                var delta = currentTime - this._lastFrame | 0;\n                if (delta < this._minElapsedMS) {\n                    return;\n                }\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            var head = this._head;\n            // Invoke listeners added to internal emitter\n            var listener = head.next;\n            while (listener) {\n                listener = listener.emit(this.deltaTime);\n            }\n            if (!head.next) {\n                this._cancelIfNeeded();\n            }\n        }\n        else {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n        this.lastTime = currentTime;\n    };\n    Object.defineProperty(Ticker.prototype, \"FPS\", {\n        /**\n         * The frames per second at which this ticker is running.\n         * The default is approximately 60 in most modern browsers.\n         * **Note:** This does not factor in the value of\n         * {@link PIXI.Ticker#speed}, which is specific\n         * to scaling {@link PIXI.Ticker#deltaTime}.\n         *\n         * @member {number}\n         * @readonly\n         */\n        get: function () {\n            return 1000 / this.elapsedMS;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker.prototype, \"minFPS\", {\n        /**\n         * Manages the maximum amount of milliseconds allowed to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This value is used to cap {@link PIXI.Ticker#deltaTime},\n         * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n         * When setting this property it is clamped to a value between\n         * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n         *\n         * @member {number}\n         * @default 10\n         */\n        get: function () {\n            return 1000 / this._maxElapsedMS;\n        },\n        set: function (fps) {\n            // Minimum must be below the maxFPS\n            var minFPS = Math.min(this.maxFPS, fps);\n            // Must be at least 0, but below 1 / settings.TARGET_FPMS\n            var minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n            this._maxElapsedMS = 1 / minFPMS;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker.prototype, \"maxFPS\", {\n        /**\n         * Manages the minimum amount of milliseconds required to\n         * elapse between invoking {@link PIXI.Ticker#update}.\n         * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n         * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n         * Otherwise it will be at least `minFPS`\n         *\n         * @member {number}\n         * @default 0\n         */\n        get: function () {\n            if (this._minElapsedMS) {\n                return Math.round(1000 / this._minElapsedMS);\n            }\n            return 0;\n        },\n        set: function (fps) {\n            if (fps === 0) {\n                this._minElapsedMS = 0;\n            }\n            else {\n                // Max must be at least the minFPS\n                var maxFPS = Math.max(this.minFPS, fps);\n                this._minElapsedMS = 1 / (maxFPS / 1000);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker, \"shared\", {\n        /**\n         * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n         * {@link PIXI.VideoResource} to update animation frames / video textures.\n         *\n         * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n         *\n         * @example\n         * let ticker = PIXI.Ticker.shared;\n         * // Set this to prevent starting this ticker when listeners are added.\n         * // By default this is true only for the PIXI.Ticker.shared instance.\n         * ticker.autoStart = false;\n         * // FYI, call this to ensure the ticker is stopped. It should be stopped\n         * // if you have not attempted to render anything yet.\n         * ticker.stop();\n         * // Call this when you are ready for a running shared ticker.\n         * ticker.start();\n         *\n         * @example\n         * // You may use the shared ticker to render...\n         * let renderer = PIXI.autoDetectRenderer();\n         * let stage = new PIXI.Container();\n         * document.body.appendChild(renderer.view);\n         * ticker.add(function (time) {\n         *     renderer.render(stage);\n         * });\n         *\n         * @example\n         * // Or you can just update it manually.\n         * ticker.autoStart = false;\n         * ticker.stop();\n         * function animate(time) {\n         *     ticker.update(time);\n         *     renderer.render(stage);\n         *     requestAnimationFrame(animate);\n         * }\n         * animate(performance.now());\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */\n        get: function () {\n            if (!Ticker._shared) {\n                var shared = Ticker._shared = new Ticker();\n                shared.autoStart = true;\n                shared._protected = true;\n            }\n            return Ticker._shared;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Ticker, \"system\", {\n        /**\n         * The system ticker instance used by {@link PIXI.InteractionManager} and by\n         * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n         * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n         *\n         * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n         *\n         * @member {PIXI.Ticker}\n         * @static\n         */\n        get: function () {\n            if (!Ticker._system) {\n                var system = Ticker._system = new Ticker();\n                system.autoStart = true;\n                system._protected = true;\n            }\n            return Ticker._system;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Ticker;\n}());\n\n/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */\nvar TickerPlugin = /** @class */ (function () {\n    function TickerPlugin() {\n    }\n    /**\n     * Initialize the plugin with scope of application instance\n     *\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    TickerPlugin.init = function (options) {\n        var _this = this;\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker', {\n            set: function (ticker) {\n                if (this._ticker) {\n                    this._ticker.remove(this.render, this);\n                }\n                this._ticker = ticker;\n                if (ticker) {\n                    ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                }\n            },\n            get: function () {\n                return this._ticker;\n            },\n        });\n        /**\n         * Convenience method for stopping the render.\n         *\n         * @method PIXI.Application#stop\n         */\n        this.stop = function () {\n            _this._ticker.stop();\n        };\n        /**\n         * Convenience method for starting the render.\n         *\n         * @method PIXI.Application#start\n         */\n        this.start = function () {\n            _this._ticker.start();\n        };\n        /**\n         * Internal reference to the ticker.\n         *\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n        /**\n         * Ticker for doing render updates.\n         *\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n        // Start the rendering\n        if (options.autoStart) {\n            this.start();\n        }\n    };\n    /**\n     * Clean up the ticker, scoped to application.\n     *\n     * @static\n     * @private\n     */\n    TickerPlugin.destroy = function () {\n        if (this._ticker) {\n            var oldTicker = this._ticker;\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    };\n    return TickerPlugin;\n}());\n\nexport { Ticker, TickerPlugin, UPDATE_PRIORITY };\n//# sourceMappingURL=ticker.es.js.map\n"],"names":["UPDATE_PRIORITY","TickerListener","fn","context","priority","once","this","next","previous","_destroyed","prototype","match","emit","deltaTime","call","redirect","destroy","connect","hard","Ticker","_this","_head","Infinity","_requestId","_maxElapsedMS","_minElapsedMS","autoStart","deltaMS","elapsedMS","lastTime","speed","started","_protected","_lastFrame","_tick","time","update","requestAnimationFrame","_requestIfNeeded","performance","now","_cancelIfNeeded","cancelAnimationFrame","_startIfPossible","start","add","NORMAL","_addListener","addOnce","listener","current","remove","Object","defineProperty","get","count","enumerable","configurable","stop","currentTime","delta","head","set","fps","minFPS","Math","min","maxFPS","minFPMS","max","round","_shared","shared","_system","system","TickerPlugin","init","options","assign","sharedTicker","ticker","_ticker","render","LOW","oldTicker"],"sourceRoot":""}