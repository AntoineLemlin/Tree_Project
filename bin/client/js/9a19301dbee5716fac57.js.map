{"version":3,"file":"js/9a19301dbee5716fac57.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/mesh-extras/lib/mesh-extras.es.js"],"sourcesContent":["/*!\n * @pixi/mesh-extras - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/mesh-extras is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MeshGeometry, MeshMaterial, Mesh } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) { if (b.hasOwnProperty(p)) { d[p] = b[p]; } } };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\nvar PlaneGeometry = /** @class */ (function (_super) {\n    __extends(PlaneGeometry, _super);\n    function PlaneGeometry(width, height, segWidth, segHeight) {\n        if (width === void 0) { width = 100; }\n        if (height === void 0) { height = 100; }\n        if (segWidth === void 0) { segWidth = 10; }\n        if (segHeight === void 0) { segHeight = 10; }\n        var _this = _super.call(this) || this;\n        _this.segWidth = segWidth;\n        _this.segHeight = segHeight;\n        _this.width = width;\n        _this.height = height;\n        _this.build();\n        return _this;\n    }\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    PlaneGeometry.prototype.build = function () {\n        var total = this.segWidth * this.segHeight;\n        var verts = [];\n        var uvs = [];\n        var indices = [];\n        var segmentsX = this.segWidth - 1;\n        var segmentsY = this.segHeight - 1;\n        var sizeX = (this.width) / segmentsX;\n        var sizeY = (this.height) / segmentsY;\n        for (var i = 0; i < total; i++) {\n            var x = (i % this.segWidth);\n            var y = ((i / this.segWidth) | 0);\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n        var totalSub = segmentsX * segmentsY;\n        for (var i = 0; i < totalSub; i++) {\n            var xpos = i % segmentsX;\n            var ypos = (i / segmentsX) | 0;\n            var value = (ypos * this.segWidth) + xpos;\n            var value2 = (ypos * this.segWidth) + xpos + 1;\n            var value3 = ((ypos + 1) * this.segWidth) + xpos;\n            var value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n            indices.push(value, value2, value3, value2, value4, value3);\n        }\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    };\n    return PlaneGeometry;\n}(MeshGeometry));\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nvar RopeGeometry = /** @class */ (function (_super) {\n    __extends(RopeGeometry, _super);\n    /**\n     * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n     * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    function RopeGeometry(width, points, textureScale) {\n        if (width === void 0) { width = 200; }\n        if (textureScale === void 0) { textureScale = 0; }\n        var _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6)) || this;\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]}\n         */\n        _this.points = points;\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        _this._width = width;\n        /**\n         * Rope texture scale, if zero then the rope texture is stretched.\n         * @member {number}\n         * @readOnly\n         */\n        _this.textureScale = textureScale;\n        _this.build();\n        return _this;\n    }\n    Object.defineProperty(RopeGeometry.prototype, \"width\", {\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        get: function () {\n            return this._width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Refreshes Rope indices and uvs\n     * @private\n     */\n    RopeGeometry.prototype.build = function () {\n        var points = this.points;\n        if (!points)\n            { return; }\n        var vertexBuffer = this.getBuffer('aVertexPosition');\n        var uvBuffer = this.getBuffer('aTextureCoord');\n        var indexBuffer = this.getIndex();\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1) {\n            return;\n        }\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length) {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n        var uvs = uvBuffer.data;\n        var indices = indexBuffer.data;\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n        var amount = 0;\n        var prev = points[0];\n        var textureWidth = this._width * this.textureScale;\n        var total = points.length; // - 1;\n        for (var i = 0; i < total; i++) {\n            // time to do some smart drawing!\n            var index = i * 4;\n            if (this.textureScale > 0) {\n                // calculate pixel distance from previous point\n                var dx = prev.x - points[i].x;\n                var dy = prev.y - points[i].y;\n                var distance = Math.sqrt((dx * dx) + (dy * dy));\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n        var indexCount = 0;\n        for (var i = 0; i < total - 1; i++) {\n            var index = i * 2;\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n        this.updateVertices();\n    };\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    RopeGeometry.prototype.updateVertices = function () {\n        var points = this.points;\n        if (points.length < 1) {\n            return;\n        }\n        var lastPoint = points[0];\n        var nextPoint;\n        var perpX = 0;\n        var perpY = 0;\n        var vertices = this.buffers[0].data;\n        var total = points.length;\n        for (var i = 0; i < total; i++) {\n            var point = points[i];\n            var index = i * 4;\n            if (i < points.length - 1) {\n                nextPoint = points[i + 1];\n            }\n            else {\n                nextPoint = point;\n            }\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n            var perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n            perpX /= perpLength;\n            perpY /= perpLength;\n            perpX *= num;\n            perpY *= num;\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n            lastPoint = point;\n        }\n        this.buffers[0].update();\n    };\n    RopeGeometry.prototype.update = function () {\n        if (this.textureScale > 0) {\n            this.build(); // we need to update UVs\n        }\n        else {\n            this.updateVertices();\n        }\n    };\n    return RopeGeometry;\n}(MeshGeometry));\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nvar SimpleRope = /** @class */ (function (_super) {\n    __extends(SimpleRope, _super);\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the rope.\n     * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be streched instead.\n     */\n    function SimpleRope(texture, points, textureScale) {\n        if (textureScale === void 0) { textureScale = 0; }\n        var _this = this;\n        var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        var meshMaterial = new MeshMaterial(texture);\n        if (textureScale > 0) {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        _this = _super.call(this, ropeGeometry, meshMaterial) || this;\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        _this.autoUpdate = true;\n        return _this;\n    }\n    SimpleRope.prototype._render = function (renderer) {\n        var geometry = this.geometry;\n        if (this.autoUpdate || geometry._width !== this.shader.texture.height) {\n            geometry._width = this.shader.texture.height;\n            geometry.update();\n        }\n        _super.prototype._render.call(this, renderer);\n    };\n    return SimpleRope;\n}(Mesh));\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nvar SimplePlane = /** @class */ (function (_super) {\n    __extends(SimplePlane, _super);\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the SimplePlane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    function SimplePlane(texture, verticesX, verticesY) {\n        var _this = this;\n        var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        var meshMaterial = new MeshMaterial(Texture.WHITE);\n        _this = _super.call(this, planeGeometry, meshMaterial) || this;\n        // lets call the setter to ensure all necessary updates are performed\n        _this.texture = texture;\n        return _this;\n    }\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    SimplePlane.prototype.textureUpdated = function () {\n        this._textureID = this.shader.texture._updateID;\n        var geometry = this.geometry;\n        geometry.width = this.shader.texture.width;\n        geometry.height = this.shader.texture.height;\n        geometry.build();\n    };\n    Object.defineProperty(SimplePlane.prototype, \"texture\", {\n        get: function () {\n            return this.shader.texture;\n        },\n        set: function (value) {\n            // Track texture same way sprite does.\n            // For generated meshes like NineSlicePlane it can change the geometry.\n            // Unfortunately, this method might not work if you directly change texture in material.\n            if (this.shader.texture === value) {\n                return;\n            }\n            this.shader.texture = value;\n            this._textureID = -1;\n            if (value.baseTexture.valid) {\n                this.textureUpdated();\n            }\n            else {\n                value.once('update', this.textureUpdated, this);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SimplePlane.prototype._render = function (renderer) {\n        if (this._textureID !== this.shader.texture._updateID) {\n            this.textureUpdated();\n        }\n        _super.prototype._render.call(this, renderer);\n    };\n    SimplePlane.prototype.destroy = function (options) {\n        this.shader.texture.off('update', this.textureUpdated, this);\n        _super.prototype.destroy.call(this, options);\n    };\n    return SimplePlane;\n}(Mesh));\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\nvar SimpleMesh = /** @class */ (function (_super) {\n    __extends(SimpleMesh, _super);\n    /**\n     * @param {PIXI.Texture} [texture=Texture.EMPTY] - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n        if (texture === void 0) { texture = Texture.EMPTY; }\n        var _this = this;\n        var geometry = new MeshGeometry(vertices, uvs, indices);\n        geometry.getBuffer('aVertexPosition').static = false;\n        var meshMaterial = new MeshMaterial(texture);\n        _this = _super.call(this, geometry, meshMaterial, null, drawMode) || this;\n        /**\n         * upload vertices buffer each frame\n         * @member {boolean}\n         */\n        _this.autoUpdate = true;\n        return _this;\n    }\n    Object.defineProperty(SimpleMesh.prototype, \"vertices\", {\n        /**\n         * Collection of vertices data.\n         * @member {Float32Array}\n         */\n        get: function () {\n            return this.geometry.getBuffer('aVertexPosition').data;\n        },\n        set: function (value) {\n            this.geometry.getBuffer('aVertexPosition').data = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SimpleMesh.prototype._render = function (renderer) {\n        if (this.autoUpdate) {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n        _super.prototype._render.call(this, renderer);\n    };\n    return SimpleMesh;\n}(Mesh));\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\nvar NineSlicePlane = /** @class */ (function (_super) {\n    __extends(NineSlicePlane, _super);\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n        if (leftWidth === void 0) { leftWidth = DEFAULT_BORDER_SIZE; }\n        if (topHeight === void 0) { topHeight = DEFAULT_BORDER_SIZE; }\n        if (rightWidth === void 0) { rightWidth = DEFAULT_BORDER_SIZE; }\n        if (bottomHeight === void 0) { bottomHeight = DEFAULT_BORDER_SIZE; }\n        var _this = _super.call(this, Texture.WHITE, 4, 4) || this;\n        _this._origWidth = texture.orig.width;\n        _this._origHeight = texture.orig.height;\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        _this._width = _this._origWidth;\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        _this._height = _this._origHeight;\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @private\n         */\n        _this._leftWidth = leftWidth;\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @private\n         */\n        _this._rightWidth = rightWidth;\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @private\n         */\n        _this._topHeight = topHeight;\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @private\n         */\n        _this._bottomHeight = bottomHeight;\n        // lets call the setter to ensure all necessary updates are performed\n        _this.texture = texture;\n        return _this;\n    }\n    NineSlicePlane.prototype.textureUpdated = function () {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    };\n    Object.defineProperty(NineSlicePlane.prototype, \"vertices\", {\n        get: function () {\n            return this.geometry.getBuffer('aVertexPosition').data;\n        },\n        set: function (value) {\n            this.geometry.getBuffer('aVertexPosition').data = value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    NineSlicePlane.prototype.updateHorizontalVertices = function () {\n        var vertices = this.vertices;\n        var scale = this._getMinScale();\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    };\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    NineSlicePlane.prototype.updateVerticalVertices = function () {\n        var vertices = this.vertices;\n        var scale = this._getMinScale();\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    };\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     *\n     * @return {number} Smaller number of vertical and horizontal scale.\n     * @private\n     */\n    NineSlicePlane.prototype._getMinScale = function () {\n        var w = this._leftWidth + this._rightWidth;\n        var scaleW = this._width > w ? 1.0 : this._width / w;\n        var h = this._topHeight + this._bottomHeight;\n        var scaleH = this._height > h ? 1.0 : this._height / h;\n        var scale = Math.min(scaleW, scaleH);\n        return scale;\n    };\n    Object.defineProperty(NineSlicePlane.prototype, \"width\", {\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            this._refresh();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NineSlicePlane.prototype, \"height\", {\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            this._refresh();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NineSlicePlane.prototype, \"leftWidth\", {\n        /**\n         * The width of the left column\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._leftWidth;\n        },\n        set: function (value) {\n            this._leftWidth = value;\n            this._refresh();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NineSlicePlane.prototype, \"rightWidth\", {\n        /**\n         * The width of the right column\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._rightWidth;\n        },\n        set: function (value) {\n            this._rightWidth = value;\n            this._refresh();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NineSlicePlane.prototype, \"topHeight\", {\n        /**\n         * The height of the top row\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._topHeight;\n        },\n        set: function (value) {\n            this._topHeight = value;\n            this._refresh();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NineSlicePlane.prototype, \"bottomHeight\", {\n        /**\n         * The height of the bottom row\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._bottomHeight;\n        },\n        set: function (value) {\n            this._bottomHeight = value;\n            this._refresh();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    NineSlicePlane.prototype._refresh = function () {\n        var texture = this.texture;\n        var uvs = this.geometry.buffers[1].data;\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n        var _uvw = 1.0 / this._origWidth;\n        var _uvh = 1.0 / this._origHeight;\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    };\n    return NineSlicePlane;\n}(SimplePlane));\n\nexport { NineSlicePlane, PlaneGeometry, RopeGeometry, SimpleMesh, SimplePlane, SimpleRope };\n//# sourceMappingURL=mesh-extras.es.js.map\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","PlaneGeometry","_super","width","height","segWidth","segHeight","_this","call","build","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update","RopeGeometry","points","textureScale","length","_width","defineProperty","get","enumerable","configurable","vertexBuffer","getBuffer","uvBuffer","getIndex","amount","prev","textureWidth","index","dx","dy","distance","Math","sqrt","indexCount","updateVertices","nextPoint","lastPoint","perpX","perpY","vertices","point","perpLength","num","SimpleRope","texture","ropeGeometry","meshMaterial","baseTexture","wrapMode","autoUpdate","_render","renderer","geometry","shader","SimplePlane","verticesX","verticesY","planeGeometry","textureUpdated","_textureID","_updateID","set","valid","once","destroy","options","off","SimpleMesh","drawMode","static","NineSlicePlane","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","_origHeight","_height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_refresh","updateHorizontalVertices","scale","_getMinScale","updateVerticalVertices","w","scaleW","h","scaleH","min","_uvw","_uvh"],"sourceRoot":""}