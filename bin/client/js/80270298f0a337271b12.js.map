{"version":3,"file":"js/80270298f0a337271b12.js","mappings":"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","sources":["webpack:///../../node_modules/@pixi/math/lib/math.es.js"],"sourcesContent":["/*!\n * @pixi/math - v5.3.11\n * Compiled Mon, 01 Nov 2021 16:10:12 UTC\n *\n * @pixi/math is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * Two Pi.\n *\n * @static\n * @constant {number} PI_2\n * @memberof PIXI\n */\nvar PI_2 = Math.PI * 2;\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @constant {number} RAD_TO_DEG\n * @memberof PIXI\n */\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @constant {number} DEG_TO_RAD\n * @memberof PIXI\n */\nvar DEG_TO_RAD = Math.PI / 180;\nvar SHAPES;\n(function (SHAPES) {\n    SHAPES[SHAPES[\"POLY\"] = 0] = \"POLY\";\n    SHAPES[SHAPES[\"RECT\"] = 1] = \"RECT\";\n    SHAPES[SHAPES[\"CIRC\"] = 2] = \"CIRC\";\n    SHAPES[SHAPES[\"ELIP\"] = 3] = \"ELIP\";\n    SHAPES[SHAPES[\"RREC\"] = 4] = \"RREC\";\n})(SHAPES || (SHAPES = {}));\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @constant\n * @name SHAPES\n * @memberof PIXI\n * @type {enum}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n * @enum {number}\n */\n\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nvar Rectangle = /** @class */ (function () {\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    function Rectangle(x, y, width, height) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (width === void 0) { width = 0; }\n        if (height === void 0) { height = 0; }\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n    Object.defineProperty(Rectangle.prototype, \"left\", {\n        /**\n         * returns the left edge of the rectangle\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.x;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"right\", {\n        /**\n         * returns the right edge of the rectangle\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.x + this.width;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"top\", {\n        /**\n         * returns the top edge of the rectangle\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.y;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle.prototype, \"bottom\", {\n        /**\n         * returns the bottom edge of the rectangle\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this.y + this.height;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Rectangle, \"EMPTY\", {\n        /**\n         * A constant empty rectangle.\n         *\n         * @static\n         * @constant\n         * @member {PIXI.Rectangle}\n         * @return {PIXI.Rectangle} An empty rectangle\n         */\n        get: function () {\n            return new Rectangle(0, 0, 0, 0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    Rectangle.prototype.clone = function () {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    };\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy from.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    Rectangle.prototype.copyFrom = function (rectangle) {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n        return this;\n    };\n    /**\n     * Copies this rectangle to another one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy to.\n     * @return {PIXI.Rectangle} Returns given parameter.\n     */\n    Rectangle.prototype.copyTo = function (rectangle) {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n        return rectangle;\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    Rectangle.prototype.contains = function (x, y) {\n        if (this.width <= 0 || this.height <= 0) {\n            return false;\n        }\n        if (x >= this.x && x < this.x + this.width) {\n            if (y >= this.y && y < this.y + this.height) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param {number} [paddingX=0] - The horizontal padding amount.\n     * @param {number} [paddingY=0] - The vertical padding amount.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    Rectangle.prototype.pad = function (paddingX, paddingY) {\n        if (paddingX === void 0) { paddingX = 0; }\n        if (paddingY === void 0) { paddingY = paddingX; }\n        this.x -= paddingX;\n        this.y -= paddingY;\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n        return this;\n    };\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    Rectangle.prototype.fit = function (rectangle) {\n        var x1 = Math.max(this.x, rectangle.x);\n        var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        var y1 = Math.max(this.y, rectangle.y);\n        var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n        return this;\n    };\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param {number} [resolution=1] resolution\n     * @param {number} [eps=0.001] precision\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    Rectangle.prototype.ceil = function (resolution, eps) {\n        if (resolution === void 0) { resolution = 1; }\n        if (eps === void 0) { eps = 0.001; }\n        var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n        return this;\n    };\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    Rectangle.prototype.enlarge = function (rectangle) {\n        var x1 = Math.min(this.x, rectangle.x);\n        var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        var y1 = Math.min(this.y, rectangle.y);\n        var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n        return this;\n    };\n    return Rectangle;\n}());\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nvar Circle = /** @class */ (function () {\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this circle\n     * @param {number} [y=0] - The Y coordinate of the center of this circle\n     * @param {number} [radius=0] - The radius of the circle\n     */\n    function Circle(x, y, radius) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (radius === void 0) { radius = 0; }\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.radius = radius;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.CIRC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.CIRC;\n    }\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return {PIXI.Circle} a copy of the Circle\n     */\n    Circle.prototype.clone = function () {\n        return new Circle(this.x, this.y, this.radius);\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Circle\n     */\n    Circle.prototype.contains = function (x, y) {\n        if (this.radius <= 0) {\n            return false;\n        }\n        var r2 = this.radius * this.radius;\n        var dx = (this.x - x);\n        var dy = (this.y - y);\n        dx *= dx;\n        dy *= dy;\n        return (dx + dy <= r2);\n    };\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return {PIXI.Rectangle} the framing rectangle\n    */\n    Circle.prototype.getBounds = function () {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    };\n    return Circle;\n}());\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @class\n * @memberof PIXI\n */\nvar Ellipse = /** @class */ (function () {\n    /**\n     * @param {number} [x=0] - The X coordinate of the center of this ellipse\n     * @param {number} [y=0] - The Y coordinate of the center of this ellipse\n     * @param {number} [halfWidth=0] - The half width of this ellipse\n     * @param {number} [halfHeight=0] - The half height of this ellipse\n     */\n    function Ellipse(x, y, halfWidth, halfHeight) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (halfWidth === void 0) { halfWidth = 0; }\n        if (halfHeight === void 0) { halfHeight = 0; }\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = halfWidth;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = halfHeight;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.ELIP\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.ELIP;\n    }\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} a copy of the ellipse\n     */\n    Ellipse.prototype.clone = function () {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coords are within this ellipse\n     */\n    Ellipse.prototype.contains = function (x, y) {\n        if (this.width <= 0 || this.height <= 0) {\n            return false;\n        }\n        // normalize the coords to an ellipse with center 0,0\n        var normx = ((x - this.x) / this.width);\n        var normy = ((y - this.y) / this.height);\n        normx *= normx;\n        normy *= normy;\n        return (normx + normy <= 1);\n    };\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return {PIXI.Rectangle} the framing rectangle\n     */\n    Ellipse.prototype.getBounds = function () {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    };\n    return Ellipse;\n}());\n\n/**\n * A class to define a shape via user defined co-orinates.\n *\n * @class\n * @memberof PIXI\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * @param {PIXI.IPoint[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    function Polygon() {\n        var arguments$1 = arguments;\n\n        var points = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            points[_i] = arguments$1[_i];\n        }\n        var flat = Array.isArray(points[0]) ? points[0] : points;\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number') {\n            var p = [];\n            for (var i = 0, il = flat.length; i < il; i++) {\n                p.push(flat[i].x, flat[i].y);\n            }\n            flat = p;\n        }\n        /**\n         * An array of the points of this polygon\n         *\n         * @member {number[]}\n         */\n        this.points = flat;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.POLY\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.POLY;\n        /**\n         * `false` after moveTo, `true` after `closePath`. In all other cases it is `true`.\n         * @member {boolean}\n         * @default true\n         */\n        this.closeStroke = true;\n    }\n    /**\n     * Creates a clone of this polygon\n     *\n     * @return {PIXI.Polygon} a copy of the polygon\n     */\n    Polygon.prototype.clone = function () {\n        var points = this.points.slice();\n        var polygon = new Polygon(points);\n        polygon.closeStroke = this.closeStroke;\n        return polygon;\n    };\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this polygon\n     */\n    Polygon.prototype.contains = function (x, y) {\n        var inside = false;\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        var length = this.points.length / 2;\n        for (var i = 0, j = length - 1; i < length; j = i++) {\n            var xi = this.points[i * 2];\n            var yi = this.points[(i * 2) + 1];\n            var xj = this.points[j * 2];\n            var yj = this.points[(j * 2) + 1];\n            var intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return inside;\n    };\n    return Polygon;\n}());\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @class\n * @memberof PIXI\n */\nvar RoundedRectangle = /** @class */ (function () {\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param {number} [width=0] - The overall width of this rounded rectangle\n     * @param {number} [height=0] - The overall height of this rounded rectangle\n     * @param {number} [radius=20] - Controls the radius of the rounded corners\n     */\n    function RoundedRectangle(x, y, width, height, radius) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        if (width === void 0) { width = 0; }\n        if (height === void 0) { height = 0; }\n        if (radius === void 0) { radius = 20; }\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = width;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = height;\n        /**\n         * @member {number}\n         * @default 20\n         */\n        this.radius = radius;\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readonly\n         * @default PIXI.SHAPES.RREC\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RREC;\n    }\n    /**\n     * Creates a clone of this Rounded Rectangle\n     *\n     * @return {PIXI.RoundedRectangle} a copy of the rounded rectangle\n     */\n    RoundedRectangle.prototype.clone = function () {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    };\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rounded Rectangle\n     */\n    RoundedRectangle.prototype.contains = function (x, y) {\n        if (this.width <= 0 || this.height <= 0) {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width) {\n            if (y >= this.y && y <= this.y + this.height) {\n                if ((y >= this.y + this.radius && y <= this.y + this.height - this.radius)\n                    || (x >= this.x + this.radius && x <= this.x + this.width - this.radius)) {\n                    return true;\n                }\n                var dx = x - (this.x + this.radius);\n                var dy = y - (this.y + this.radius);\n                var radius2 = this.radius * this.radius;\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n                dx = x - (this.x + this.width - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n                dy = y - (this.y + this.height - this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n                dx = x - (this.x + this.radius);\n                if ((dx * dx) + (dy * dy) <= radius2) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    return RoundedRectangle;\n}());\n\n/**\n * Common interface for points. Both Point and ObservablePoint implement it\n * @memberof PIXI\n * @interface IPointData\n */\n/**\n * X coord\n * @memberof PIXI.IPointData#\n * @member {number} x\n */\n/**\n * Y coord\n * @memberof PIXI.IPointData#\n * @member {number} y\n */\n\n/**\n * Common interface for points. Both Point and ObservablePoint implement it\n * @memberof PIXI\n * @interface IPoint\n * @extends PIXI.IPointData\n */\n/**\n * Sets the point to a new x and y position.\n * If y is omitted, both x and y will be set to x.\n *\n * @method set\n * @memberof PIXI.IPoint#\n * @param {number} [x=0] - position of the point on the x axis\n * @param {number} [y=x] - position of the point on the y axis\n */\n/**\n * Copies x and y from the given point\n * @method copyFrom\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPointData} p - The point to copy from\n * @returns {this} Returns itself.\n */\n/**\n * Copies x and y into the given point\n * @method copyTo\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPoint} p - The point to copy.\n * @returns {PIXI.IPoint} Given point with values updated\n */\n/**\n * Returns true if the given point is equal to this point\n *\n * @method equals\n * @memberof PIXI.IPoint#\n * @param {PIXI.IPointData} p - The point to check\n * @returns {boolean} Whether the given point equal to this point\n */\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nvar Point = /** @class */ (function () {\n    /**\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    function Point(x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n    }\n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    Point.prototype.clone = function () {\n        return new Point(this.x, this.y);\n    };\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPointData} p - The point to copy from\n     * @returns {this} Returns itself.\n     */\n    Point.prototype.copyFrom = function (p) {\n        this.set(p.x, p.y);\n        return this;\n    };\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    Point.prototype.copyTo = function (p) {\n        p.set(this.x, this.y);\n        return p;\n    };\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPointData} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    Point.prototype.equals = function (p) {\n        return (p.x === this.x) && (p.y === this.y);\n    };\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns {this} Returns itself.\n     */\n    Point.prototype.set = function (x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = x; }\n        this.x = x;\n        this.y = y;\n        return this;\n    };\n    return Point;\n}());\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * An ObservablePoint is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nvar ObservablePoint = /** @class */ (function () {\n    /**\n     * @param {Function} cb - callback when changed\n     * @param {object} scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    function ObservablePoint(cb, scope, x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = 0; }\n        this._x = x;\n        this._y = y;\n        this.cb = cb;\n        this.scope = scope;\n    }\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overidden otherwise they will default\n     * to the clone object's values.\n     *\n     * @override\n     * @param {Function} [cb=null] - callback when changed\n     * @param {object} [scope=null] - owner of callback\n     * @return {PIXI.ObservablePoint} a copy of the point\n     */\n    ObservablePoint.prototype.clone = function (cb, scope) {\n        if (cb === void 0) { cb = this.cb; }\n        if (scope === void 0) { scope = this.scope; }\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    };\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns {this} Returns itself.\n     */\n    ObservablePoint.prototype.set = function (x, y) {\n        if (x === void 0) { x = 0; }\n        if (y === void 0) { y = x; }\n        if (this._x !== x || this._y !== y) {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n        return this;\n    };\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.IPointData} p - The point to copy from.\n     * @returns {this} Returns itself.\n     */\n    ObservablePoint.prototype.copyFrom = function (p) {\n        if (this._x !== p.x || this._y !== p.y) {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n        return this;\n    };\n    /**\n     * Copies x and y into the given point\n     *\n     * @param {PIXI.IPoint} p - The point to copy.\n     * @returns {PIXI.IPoint} Given point with values updated\n     */\n    ObservablePoint.prototype.copyTo = function (p) {\n        p.set(this._x, this._y);\n        return p;\n    };\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.IPointData} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    ObservablePoint.prototype.equals = function (p) {\n        return (p.x === this._x) && (p.y === this._y);\n    };\n    Object.defineProperty(ObservablePoint.prototype, \"x\", {\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            if (this._x !== value) {\n                this._x = value;\n                this.cb.call(this.scope);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservablePoint.prototype, \"y\", {\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            if (this._y !== value) {\n                this._y = value;\n                this.cb.call(this.scope);\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ObservablePoint;\n}());\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @class\n * @memberof PIXI\n */\nvar Matrix = /** @class */ (function () {\n    /**\n     * @param {number} [a=1] - x scale\n     * @param {number} [b=0] - x skew\n     * @param {number} [c=0] - y skew\n     * @param {number} [d=1] - y scale\n     * @param {number} [tx=0] - x translation\n     * @param {number} [ty=0] - y translation\n     */\n    function Matrix(a, b, c, d, tx, ty) {\n        if (a === void 0) { a = 1; }\n        if (b === void 0) { b = 0; }\n        if (c === void 0) { c = 0; }\n        if (d === void 0) { d = 1; }\n        if (tx === void 0) { tx = 0; }\n        if (ty === void 0) { ty = 0; }\n        this.array = null;\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.a = a;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.b = b;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.c = c;\n        /**\n         * @member {number}\n         * @default 1\n         */\n        this.d = d;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.tx = tx;\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.ty = ty;\n    }\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     *\n     * @param {number[]} array - The array that the matrix will be populated from.\n     */\n    Matrix.prototype.fromArray = function (array) {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    };\n    /**\n     * sets the matrix properties\n     *\n     * @param {number} a - Matrix component\n     * @param {number} b - Matrix component\n     * @param {number} c - Matrix component\n     * @param {number} d - Matrix component\n     * @param {number} tx - Matrix component\n     * @param {number} ty - Matrix component\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.set = function (a, b, c, d, tx, ty) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n        return this;\n    };\n    /**\n     * Creates an array from the current Matrix object.\n     *\n     * @param {boolean} transpose - Whether we need to transpose the matrix or not\n     * @param {Float32Array} [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @return {number[]} the newly created array which contains the matrix\n     */\n    Matrix.prototype.toArray = function (transpose, out) {\n        if (!this.array) {\n            this.array = new Float32Array(9);\n        }\n        var array = out || this.array;\n        if (transpose) {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n        return array;\n    };\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     *\n     * @param {PIXI.IPointData} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, transformed through this matrix\n     */\n    Matrix.prototype.apply = function (pos, newPos) {\n        newPos = (newPos || new Point());\n        var x = pos.x;\n        var y = pos.y;\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n        return newPos;\n    };\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     *\n     * @param {PIXI.IPointData} pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    Matrix.prototype.applyInverse = function (pos, newPos) {\n        newPos = (newPos || new Point());\n        var id = 1 / ((this.a * this.d) + (this.c * -this.b));\n        var x = pos.x;\n        var y = pos.y;\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n        return newPos;\n    };\n    /**\n     * Translates the matrix on the x and y.\n     *\n     * @param {number} x - How much to translate x by\n     * @param {number} y - How much to translate y by\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.translate = function (x, y) {\n        this.tx += x;\n        this.ty += y;\n        return this;\n    };\n    /**\n     * Applies a scale transformation to the matrix.\n     *\n     * @param {number} x - The amount to scale horizontally\n     * @param {number} y - The amount to scale vertically\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.scale = function (x, y) {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n        return this;\n    };\n    /**\n     * Applies a rotation transformation to the matrix.\n     *\n     * @param {number} angle - The angle in radians.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.rotate = function (angle) {\n        var cos = Math.cos(angle);\n        var sin = Math.sin(angle);\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n        return this;\n    };\n    /**\n     * Appends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to append.\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.append = function (matrix) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n        return this;\n    };\n    /**\n     * Sets the matrix based on all the available properties\n     *\n     * @param {number} x - Position on the x axis\n     * @param {number} y - Position on the y axis\n     * @param {number} pivotX - Pivot on the x axis\n     * @param {number} pivotY - Pivot on the y axis\n     * @param {number} scaleX - Scale on the x axis\n     * @param {number} scaleY - Scale on the y axis\n     * @param {number} rotation - Rotation in radians\n     * @param {number} skewX - Skew on the x axis\n     * @param {number} skewY - Skew on the y axis\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n        return this;\n    };\n    /**\n     * Prepends the given Matrix to this Matrix.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to prepend\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.prepend = function (matrix) {\n        var tx1 = this.tx;\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n            var a1 = this.a;\n            var c1 = this.c;\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n        return this;\n    };\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     *\n     * @param {PIXI.Transform} transform - The transform to apply the properties to.\n     * @return {PIXI.Transform} The transform with the newly applied properties\n     */\n    Matrix.prototype.decompose = function (transform) {\n        // sort out rotation / skew..\n        var a = this.a;\n        var b = this.b;\n        var c = this.c;\n        var d = this.d;\n        var skewX = -Math.atan2(-c, d);\n        var skewY = Math.atan2(b, a);\n        var delta = Math.abs(skewX + skewY);\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n        // next set position\n        transform.position.x = this.tx;\n        transform.position.y = this.ty;\n        return transform;\n    };\n    /**\n     * Inverts this matrix\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.invert = function () {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        var tx1 = this.tx;\n        var n = (a1 * d1) - (b1 * c1);\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n        return this;\n    };\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     *\n     * @return {PIXI.Matrix} This matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.identity = function () {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n        return this;\n    };\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     *\n     * @return {PIXI.Matrix} A copy of this matrix. Good for chaining method calls.\n     */\n    Matrix.prototype.clone = function () {\n        var matrix = new Matrix();\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n        return matrix;\n    };\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy to.\n     * @return {PIXI.Matrix} The matrix given in parameter with its values updated.\n     */\n    Matrix.prototype.copyTo = function (matrix) {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n        return matrix;\n    };\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @return {PIXI.Matrix} this\n     */\n    Matrix.prototype.copyFrom = function (matrix) {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n        return this;\n    };\n    Object.defineProperty(Matrix, \"IDENTITY\", {\n        /**\n         * A default (identity) matrix\n         *\n         * @static\n         * @const\n         * @member {PIXI.Matrix}\n         */\n        get: function () {\n            return new Matrix();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Matrix, \"TEMP_MATRIX\", {\n        /**\n         * A temp matrix\n         *\n         * @static\n         * @const\n         * @member {PIXI.Matrix}\n         */\n        get: function () {\n            return new Matrix();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Matrix;\n}());\n\n// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\nvar rotationCayley = [];\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\nvar rotationMatrices = [];\n/*\n * Alias for {@code Math.sign}.\n */\nvar signum = Math.sign;\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init() {\n    for (var i = 0; i < 16; i++) {\n        var row = [];\n        rotationCayley.push(row);\n        for (var j = 0; j < 16; j++) {\n            /* Multiplies rotation matrices i and j. */\n            var _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            var _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            var _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            var _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (var k = 0; k < 16; k++) {\n                if (ux[k] === _ux && uy[k] === _uy\n                    && vx[k] === _vx && vy[k] === _vy) {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n    for (var i = 0; i < 16; i++) {\n        var mat = new Matrix();\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\ninit();\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nvar groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n    /**\n     * Reflection about Y-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n    /**\n     * Reflection about the main diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n    /**\n     * Reflection about X-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n    /**\n     * Reflection about reverse diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: function (ind) { return ux[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: function (ind) { return uy[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: function (ind) { return vx[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: function (ind) { return vy[ind]; },\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: function (rotation) {\n        if (rotation & 8) // true only if between 8 & 15 (reflections)\n         {\n            return rotation & 15; // or rotation % 16\n        }\n        return (-rotation) & 7; // or (8 - rotation) % 8\n    },\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @return {PIXI.GD8Symmetry} Composed operation\n     */\n    add: function (rotationSecond, rotationFirst) { return (rotationCayley[rotationSecond][rotationFirst]); },\n    /**\n     * Reverse of `add`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @return {PIXI.GD8Symmetry} Result\n     */\n    sub: function (rotationSecond, rotationFirst) { return (rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]); },\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: function (rotation) { return rotation ^ 4; },\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: function (rotation) { return (rotation & 3) === 2; },\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @return {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: function (dx, dy) {\n        if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n            if (dy >= 0) {\n                return groupD8.S;\n            }\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n            if (dx > 0) {\n                return groupD8.E;\n            }\n            return groupD8.W;\n        }\n        else if (dy > 0) {\n            if (dx > 0) {\n                return groupD8.SE;\n            }\n            return groupD8.SW;\n        }\n        else if (dx > 0) {\n            return groupD8.NE;\n        }\n        return groupD8.NW;\n    },\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: function (matrix, rotation, tx, ty) {\n        if (tx === void 0) { tx = 0; }\n        if (ty === void 0) { ty = 0; }\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        var mat = rotationMatrices[groupD8.inv(rotation)];\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @memberof PIXI\n */\nvar Transform = /** @class */ (function () {\n    function Transform() {\n        /**\n         * The world transformation matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.worldTransform = new Matrix();\n        /**\n         * The local transformation matrix.\n         *\n         * @member {PIXI.Matrix}\n         */\n        this.localTransform = new Matrix();\n        /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n        /**\n         * The rotation amount.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._rotation = 0;\n        /**\n         * The X-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._cx = 1;\n        /**\n         * The Y-coordinate value of the normalized local X axis,\n         * the first column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._sx = 0;\n        /**\n         * The X-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._cy = 0;\n        /**\n         * The Y-coordinate value of the normalized local Y axis,\n         * the second column of the local transformation matrix without a scale.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._sy = 1;\n        /**\n         * The locally unique ID of the local transform.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._localID = 0;\n        /**\n         * The locally unique ID of the local transform\n         * used to calculate the current local transformation matrix.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._currentLocalID = 0;\n        /**\n         * The locally unique ID of the world transform.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._worldID = 0;\n        /**\n         * The locally unique ID of the parent's world transform\n         * used to calculate the current world transformation matrix.\n         *\n         * @protected\n         * @member {number}\n         */\n        this._parentID = 0;\n    }\n    /**\n     * Called when a value changes.\n     *\n     * @protected\n     */\n    Transform.prototype.onChange = function () {\n        this._localID++;\n    };\n    /**\n     * Called when the skew or the rotation changes.\n     *\n     * @protected\n     */\n    Transform.prototype.updateSkew = function () {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n        this._localID++;\n    };\n    /**\n     * Updates the local transformation matrix.\n     */\n    Transform.prototype.updateLocalTransform = function () {\n        var lt = this.localTransform;\n        if (this._localID !== this._currentLocalID) {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n            // force an update..\n            this._parentID = -1;\n        }\n    };\n    /**\n     * Updates the local and the world transformation matrices.\n     *\n     * @param {PIXI.Transform} parentTransform - The parent transform\n     */\n    Transform.prototype.updateTransform = function (parentTransform) {\n        var lt = this.localTransform;\n        if (this._localID !== this._currentLocalID) {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n            // force an update..\n            this._parentID = -1;\n        }\n        if (this._parentID !== parentTransform._worldID) {\n            // concat the parent matrix with the objects transform.\n            var pt = parentTransform.worldTransform;\n            var wt = this.worldTransform;\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n            this._parentID = parentTransform._worldID;\n            // update the id of the transform..\n            this._worldID++;\n        }\n    };\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    Transform.prototype.setFromMatrix = function (matrix) {\n        matrix.decompose(this);\n        this._localID++;\n    };\n    Object.defineProperty(Transform.prototype, \"rotation\", {\n        /**\n         * The rotation of the object in radians.\n         *\n         * @member {number}\n         */\n        get: function () {\n            return this._rotation;\n        },\n        set: function (value) {\n            if (this._rotation !== value) {\n                this._rotation = value;\n                this.updateSkew();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * A default (identity) transform\n     *\n     * @static\n     * @constant\n     * @member {PIXI.Transform}\n     */\n    Transform.IDENTITY = new Transform();\n    return Transform;\n}());\n\n/**\n * Math classes and utilities mixed into PIXI namespace.\n *\n * @lends PIXI\n */\n\nexport { Circle, DEG_TO_RAD, Ellipse, Matrix, ObservablePoint, PI_2, Point, Polygon, RAD_TO_DEG, Rectangle, RoundedRectangle, SHAPES, Transform, groupD8 };\n//# sourceMappingURL=math.es.js.map\n"],"names":["SHAPES","PI_2","Math","PI","RAD_TO_DEG","DEG_TO_RAD","Rectangle","x","y","width","height","this","Number","type","RECT","Object","defineProperty","prototype","get","enumerable","configurable","clone","copyFrom","rectangle","copyTo","contains","pad","paddingX","paddingY","fit","x1","max","x2","min","y1","y2","ceil","resolution","eps","floor","enlarge","Circle","radius","CIRC","r2","dx","dy","getBounds","Ellipse","halfWidth","halfHeight","ELIP","normx","normy","Polygon","arguments$1","arguments","points","_i","length","flat","Array","isArray","p","i","il","push","POLY","closeStroke","polygon","slice","inside","j","xi","yi","xj","yj","RoundedRectangle","RREC","radius2","Point","set","equals","ObservablePoint","cb","scope","_x","_y","call","value","Matrix","a","b","c","d","tx","ty","array","fromArray","toArray","transpose","out","Float32Array","apply","pos","newPos","applyInverse","id","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","setTransform","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","transform","atan2","delta","abs","skew","sqrt","position","invert","n","identity","ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","sign","row","_ux","_uy","_vx","_vy","k","mat","init","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","matrixAppendRotationInv","Transform","worldTransform","localTransform","onChange","pivot","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","updateLocalTransform","lt","updateTransform","parentTransform","pt","wt","setFromMatrix","IDENTITY"],"sourceRoot":""}