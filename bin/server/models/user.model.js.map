{"version":3,"sources":["../../../src/server/models/user.model.js"],"names":["mongoose","require","isEmail","userSchema","Schema","color","type","String","minLength","maxlength","email","required","validate","maxLength","unique","trim","username","password","timestamps","statics","login","user","findOne","Error","UserModel","model","module","exports"],"mappings":";;AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAYD,OAAO,CAAC,WAAD,CAAzB;;AAEA,MAAME,UAAU,GAAG,IAAIH,QAAQ,CAACI,MAAb,CACnB;AACAC,EAAAA,KAAK,EAAE;AACPC,IAAAA,IAAI,EAACC,MADE;AAEPC,IAAAA,SAAS,EAAE,CAFJ;AAGPC,IAAAA,SAAS,EAAE;AAHJ,GADP;AAMAC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,IAAI,EAAEC,MADH;AAEHI,IAAAA,QAAQ,EAAE,IAFP;AAGHC,IAAAA,QAAQ,EAAC,CAACV,OAAD,CAHN;AAIHM,IAAAA,SAAS,EAAC,CAJP;AAKHK,IAAAA,SAAS,EAAE,EALR;AAMHC,IAAAA,MAAM,EAAE,IANL;AAOHC,IAAAA,IAAI,EAAE;AAPH,GANP;AAeAC,EAAAA,QAAQ,EAAC;AACLV,IAAAA,IAAI,EAAEC,MADD;AAELI,IAAAA,QAAQ,EAAE,IAFL;AAGLH,IAAAA,SAAS,EAAC,CAHL;AAILK,IAAAA,SAAS,EAAE,EAJN;AAKLC,IAAAA,MAAM,EAAE,IALH;AAMLC,IAAAA,IAAI,EAAE;AAND,GAfT;AAuBAE,EAAAA,QAAQ,EAAE;AACNX,IAAAA,IAAI,EAAEC,MADA;AAENI,IAAAA,QAAQ,EAAE,IAFJ;AAGNH,IAAAA,SAAS,EAAE,CAHL;AAINK,IAAAA,SAAS,EAAE,IAJL;AAKNE,IAAAA,IAAI,EAAE;AALA;AAvBV,CADmB,EAgCnB;AACIG,EAAAA,UAAU,EAAE;AADhB,CAhCmB,CAAnB;;AA8CAf,UAAU,CAACgB,OAAX,CAAmBC,KAAnB,GAA2B,gBAAgBV,KAAhB,EAAsBO,QAAtB,EAA+B;AACtD,QAAOI,IAAI,GAAI,MAAM,KAAKC,OAAL,CAAa;AAACZ,IAAAA;AAAD,GAAb,CAArB;;AACA,MAAGW,IAAH,EAAQ;AAEJ,QAAIJ,QAAQ,IAAII,IAAI,CAACJ,QAArB,EAA8B;AAC9B,aAAOI,IAAP;AACE;;AACD,UAAME,KAAK,CAAC,YAAD,CAAX;AACJ;;AACD,QAAMA,KAAK,CAAE,aAAF,CAAX;AACH,CAVD;;AAWA,MAAMC,SAAS,GAAGxB,QAAQ,CAACyB,KAAT,CAAe,OAAf,EAAuBtB,UAAvB,CAAlB;AAEAuB,MAAM,CAACC,OAAP,GAAiBH,SAAjB","sourcesContent":["const mongoose = require('mongoose')\r\nconst {isEmail} = require('validator')\r\n// const bcrypt = require('bcrypt')\r\nconst userSchema = new mongoose.Schema(\r\n{\r\ncolor: {\r\ntype:String,\r\nminLength: 3,\r\nmaxlength: 6\r\n},\r\nemail: {\r\n    type: String,\r\n    required: true,\r\n    validate:[isEmail],\r\n    minLength:3,\r\n    maxLength: 55,\r\n    unique: true,\r\n    trim: true, \r\n},\r\nusername:{\r\n    type: String,\r\n    required: true,\r\n    minLength:3,\r\n    maxLength: 55,\r\n    unique: true,\r\n    trim: true,\r\n},\r\npassword: {\r\n    type: String,\r\n    required: true,\r\n    minLength: 6,\r\n    maxLength: 1024,\r\n    trim: true, \r\n}\r\n},\r\n{\r\n    timestamps: true\r\n}\r\n\r\n\r\n\r\n)\r\n// play function before save into db\r\n// userSchema.pre(\"save\", async  function(next){\r\n//     const salt =await bcrypt.genSalt()\r\n//     this.password = await bcrypt.hash(this.password, salt)\r\n//     next()\r\n// })\r\n\r\nuserSchema.statics.login = async function (email,password){\r\n    const  user =  await this.findOne({email})\r\n    if(user){  \r\n         \r\n        if (password == user.password){\r\n        return user\r\n         }\r\n         throw Error('pass wrong')\r\n    }\r\n    throw Error (\"email wrong\")\r\n}\r\nconst UserModel = mongoose.model('users',userSchema);\r\n\r\nmodule.exports = UserModel"],"file":"user.model.js"}