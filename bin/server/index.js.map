{"version":3,"sources":["../../src/server/index.js"],"names":["APP_PORT","URI","process","env","mongoose","require","app","MongoClient","client","useNewUrlParser","useUnifiedTopology","use","express","json","urlencoded","extended","static","path","resolve","__dirname","get","req","res","trees","connect","err","collection","db","find","toArray","result","console","log","forEach","element","push","send","close","checkuser","requireauth","status","id","locals","user","_id","username","UserRoutes","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;AAHA,MAAM;AAACA,EAAAA,QAAD;AAAUC,EAAAA;AAAV,IAAiBC,OAAO,CAACC,GAA/B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,GAAG,GAAG,uBAAZ;;AAEA,MAAM;AAACC,EAAAA;AAAD,IAAgBF,OAAO,CAAC,SAAD,CAA7B;;AAEA,MAAMG,MAAM,GAAG,IAAID,WAAJ,CAAgBN,GAAhB,EAAqB;AAChCQ,EAAAA,eAAe,EAAE,IADe;AAEhCC,EAAAA,kBAAkB,EAAE;AAFY,CAArB,CAAf;;AAKAL,OAAO,CAAC,MAAD,CAAP;;AAEAC,GAAG,CAACK,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAP,GAAG,CAACK,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAnB,CAAR;AACAT,GAAG,CAACK,GAAJ,CAAQ,4BAAR;AACAL,GAAG,CAACK,GAAJ,CAAQC,iBAAQI,MAAR,CAAeC,cAAKC,OAAL,CAAaC,SAAb,EAAwB,kBAAxB,CAAf,CAAR;AAEAb,GAAG,CAACc,GAAJ,CAAQ,WAAR,EAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,QAAMC,KAAK,GAAG,EAAd;AACAf,EAAAA,MAAM,CAACgB,OAAP,CAAgBC,GAAD,IAAS;AACpB,UAAMC,UAAU,GAAGlB,MAAM,CAACmB,EAAP,CAAU,UAAV,EAAsBD,UAAtB,CAAiC,OAAjC,CAAnB;AACAA,IAAAA,UAAU,CAACE,IAAX,CAAgB,EAAhB,EAAoBC,OAApB,CAA4B,CAACJ,GAAD,EAAMK,MAAN,KAAiB;AACzC,UAAIL,GAAJ,EAAS,MAAMA,GAAN;AACTM,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAF,MAAAA,MAAM,CAACG,OAAP,CAAgBC,OAAD,IAAa;AACxBX,QAAAA,KAAK,CAACY,IAAN,CAAWD,OAAX;AACH,OAFD;AAGAZ,MAAAA,GAAG,CAACc,IAAJ,CAASb,KAAT;AACAf,MAAAA,MAAM,CAAC6B,KAAP;AACH,KARD;AASH,GAXD;AAYH,CAdD;AAkBC/B,GAAG,CAACc,GAAJ,CAAQ,GAAR,EAAYkB,eAAZ;AACAhC,GAAG,CAACc,GAAJ,CAAQ,QAAR,EAAiBmB,iBAAjB,EAA6B,CAAClB,GAAD,EAAKC,GAAL,KAAW;AACpCA,EAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAACK,IAAAA,EAAE,EAAEnB,GAAG,CAACoB,MAAJ,CAAWC,IAAX,CAAgBC,GAArB;AAA0BC,IAAAA,QAAQ,EAAEvB,GAAG,CAACoB,MAAJ,CAAWC,IAAX,CAAgBE;AAApD,GAArB;AACH,CAFD;AAIDvC,GAAG,CAACK,GAAJ,CAAQ,WAAR,EAAoBmC,aAApB;AAGAxC,GAAG,CAACyC,MAAJ,CAAW/C,QAAX,EAAqB,MACjB+B,OAAO,CAACC,GAAR,CAAa,kCAAiChC,QAAS,GAAvD,CADJ","sourcesContent":["import express from \"express\";\r\nimport cookieParser from \"cookie-parser\"\r\nimport UserRoutes from  './routes/user.routes'\r\nimport {checkuser,requireauth} from './middleware/auth.middleware'\r\nconst {APP_PORT,URI} = process.env;\r\nconst mongoose = require('mongoose')\r\nconst app = express()\r\nimport path from \"path\";\r\nconst {MongoClient} = require(\"mongodb\");\r\n\r\nconst client = new MongoClient(URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n});\r\n\r\nrequire('./db')\r\n\r\napp.use(express.json())\r\napp.use(express.urlencoded({extended: true}));\r\napp.use(cookieParser())\r\napp.use(express.static(path.resolve(__dirname, \"../../bin/client\")));\r\n\r\napp.get(\"/api/tree\", (req, res) => {\r\n    const trees = [];\r\n    client.connect((err) => {\r\n        const collection = client.db(\"DataTree\").collection(\"Trees\");\r\n        collection.find({}).toArray((err, result) => {\r\n            if (err) throw err;\r\n            console.log(\"Data fetched\");\r\n            result.forEach((element) => {\r\n                trees.push(element);\r\n            });\r\n            res.send(trees);\r\n            client.close();\r\n        });\r\n    });\r\n});\r\n\r\n//middleware\r\n\r\n app.get(\"*\",checkuser)\r\n app.get('/jwtid',requireauth,(req,res)=>{\r\n     res.status(200).send({id: res.locals.user._id, username: res.locals.user.username})\r\n })\r\n//routes\r\napp.use('/api/user',UserRoutes)\r\n\r\n//server\r\napp.listen(APP_PORT, () =>\r\n    console.log(`ðŸš€ Server is listening on port ${APP_PORT}.`),\r\n);\r\n"],"file":"index.js"}